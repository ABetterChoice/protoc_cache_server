// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: tab_cache_server.proto

package protoc_tab_cache_server

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 来源类型
type OriginType int32

const (
	OriginType_ORIGIN_TYPE_UNKNOWN OriginType = 0 // 未知
	OriginType_ORIGIN_TYPE_SERVER  OriginType = 1 // 服务
	OriginType_ORIGIN_TYPE_MOBILE  OriginType = 2 // 终端
)

// Enum value maps for OriginType.
var (
	OriginType_name = map[int32]string{
		0: "ORIGIN_TYPE_UNKNOWN",
		1: "ORIGIN_TYPE_SERVER",
		2: "ORIGIN_TYPE_MOBILE",
	}
	OriginType_value = map[string]int32{
		"ORIGIN_TYPE_UNKNOWN": 0,
		"ORIGIN_TYPE_SERVER":  1,
		"ORIGIN_TYPE_MOBILE":  2,
	}
)

func (x OriginType) Enum() *OriginType {
	p := new(OriginType)
	*p = x
	return p
}

func (x OriginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OriginType) Descriptor() protoreflect.EnumDescriptor {
	return file_tab_cache_server_proto_enumTypes[0].Descriptor()
}

func (OriginType) Type() protoreflect.EnumType {
	return &file_tab_cache_server_proto_enumTypes[0]
}

func (x OriginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OriginType.Descriptor instead.
func (OriginType) EnumDescriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{0}
}

// 更新方式
type UpdateType int32

const (
	UpdateType_UPDATE_TYPE_UNKNOWN  UpdateType = 0 // 未知
	UpdateType_UPDATE_TYPE_COMPLETE UpdateType = 1 // 全量
	UpdateType_UPDATE_YPE_DIFF      UpdateType = 2 // 增量补丁
)

// Enum value maps for UpdateType.
var (
	UpdateType_name = map[int32]string{
		0: "UPDATE_TYPE_UNKNOWN",
		1: "UPDATE_TYPE_COMPLETE",
		2: "UPDATE_YPE_DIFF",
	}
	UpdateType_value = map[string]int32{
		"UPDATE_TYPE_UNKNOWN":  0,
		"UPDATE_TYPE_COMPLETE": 1,
		"UPDATE_YPE_DIFF":      2,
	}
)

func (x UpdateType) Enum() *UpdateType {
	p := new(UpdateType)
	*p = x
	return p
}

func (x UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_tab_cache_server_proto_enumTypes[1].Descriptor()
}

func (UpdateType) Type() protoreflect.EnumType {
	return &file_tab_cache_server_proto_enumTypes[1]
}

func (x UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateType.Descriptor instead.
func (UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{1}
}

type Code int32

const (
	Code_CODE_SUCCESS          Code = 0    // 正常返回
	Code_CODE_NO_PERMISSION    Code = 1001 // 无权限
	Code_CODE_TRAFFIC_LIMIT    Code = 1002 // 限流返回
	Code_CODE_INVALID_BUSINESS Code = 1003 // 入参 business code 出错
	Code_CODE_SERVER_ERR       Code = 1004 // 服务器处理异常
	Code_CODE_INVALID_PARAM    Code = 1005 // 非法参数
	Code_CODE_SAME_VERSION     Code = 2001 // 版本未更新
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0:    "CODE_SUCCESS",
		1001: "CODE_NO_PERMISSION",
		1002: "CODE_TRAFFIC_LIMIT",
		1003: "CODE_INVALID_BUSINESS",
		1004: "CODE_SERVER_ERR",
		1005: "CODE_INVALID_PARAM",
		2001: "CODE_SAME_VERSION",
	}
	Code_value = map[string]int32{
		"CODE_SUCCESS":          0,
		"CODE_NO_PERMISSION":    1001,
		"CODE_TRAFFIC_LIMIT":    1002,
		"CODE_INVALID_BUSINESS": 1003,
		"CODE_SERVER_ERR":       1004,
		"CODE_INVALID_PARAM":    1005,
		"CODE_SAME_VERSION":     2001,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_tab_cache_server_proto_enumTypes[2].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_tab_cache_server_proto_enumTypes[2]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{2}
}

// hash 方法
type HashMethod int32

const (
	HashMethod_HASH_METHOD_UNKNOWN HashMethod = 0
	HashMethod_HASH_METHOD_BKDR    HashMethod = 1 // bkdr hash
	HashMethod_HASH_METHOD_MURMUR3 HashMethod = 2 // murmur3
	HashMethod_HASH_METHOD_DJB     HashMethod = 3 // djb
	HashMethod_HASH_METHOD_NEW     HashMethod = 4 // new
	HashMethod_HASH_METHOD_NEW_MD5 HashMethod = 5 // new md5
	HashMethod_HASH_METHOD_AP      HashMethod = 6 // ap
)

// Enum value maps for HashMethod.
var (
	HashMethod_name = map[int32]string{
		0: "HASH_METHOD_UNKNOWN",
		1: "HASH_METHOD_BKDR",
		2: "HASH_METHOD_MURMUR3",
		3: "HASH_METHOD_DJB",
		4: "HASH_METHOD_NEW",
		5: "HASH_METHOD_NEW_MD5",
		6: "HASH_METHOD_AP",
	}
	HashMethod_value = map[string]int32{
		"HASH_METHOD_UNKNOWN": 0,
		"HASH_METHOD_BKDR":    1,
		"HASH_METHOD_MURMUR3": 2,
		"HASH_METHOD_DJB":     3,
		"HASH_METHOD_NEW":     4,
		"HASH_METHOD_NEW_MD5": 5,
		"HASH_METHOD_AP":      6,
	}
)

func (x HashMethod) Enum() *HashMethod {
	p := new(HashMethod)
	*p = x
	return p
}

func (x HashMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_tab_cache_server_proto_enumTypes[3].Descriptor()
}

func (HashMethod) Type() protoreflect.EnumType {
	return &file_tab_cache_server_proto_enumTypes[3]
}

func (x HashMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashMethod.Descriptor instead.
func (HashMethod) EnumDescriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{3}
}

type HashType int32

const (
	HashType_HASH_TYPE_UNKNOWN HashType = 0
	HashType_HASH_TYPE_SINGLE  HashType = 1 // 单次 hash，进入层后做一次hash，直接判定命中的 group
	HashType_HASH_TYPE_DOUBLE  HashType = 2 // 双 hash，进入层后做一次 hash，判定命中的实验，实验内再做一次 hash，判定命中的 group
)

// Enum value maps for HashType.
var (
	HashType_name = map[int32]string{
		0: "HASH_TYPE_UNKNOWN",
		1: "HASH_TYPE_SINGLE",
		2: "HASH_TYPE_DOUBLE",
	}
	HashType_value = map[string]int32{
		"HASH_TYPE_UNKNOWN": 0,
		"HASH_TYPE_SINGLE":  1,
		"HASH_TYPE_DOUBLE":  2,
	}
)

func (x HashType) Enum() *HashType {
	p := new(HashType)
	*p = x
	return p
}

func (x HashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashType) Descriptor() protoreflect.EnumDescriptor {
	return file_tab_cache_server_proto_enumTypes[4].Descriptor()
}

func (HashType) Type() protoreflect.EnumType {
	return &file_tab_cache_server_proto_enumTypes[4]
}

func (x HashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashType.Descriptor instead.
func (HashType) EnumDescriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{4}
}

// 操作符
type Operator int32

const (
	Operator_OPERATOR_UNKNOWN   Operator = 0
	Operator_OPERATOR_EG        Operator = 1  // 相等
	Operator_OPERATOR_LT        Operator = 2  // 小于
	Operator_OPERATOR_LTE       Operator = 3  // 小于等于
	Operator_OPERATOR_GT        Operator = 4  // 大于
	Operator_OPERATOR_GTE       Operator = 5  // 大于等于
	Operator_OPERATOR_NE        Operator = 6  // 不等于
	Operator_OPERATOR_REGULAR   Operator = 7  // 正则
	Operator_OPERATOR_IN        Operator = 8  // 存在数组内
	Operator_OPERATOR_NOT_IN    Operator = 9  // 不存在数组内
	Operator_OPERATOR_SUPER_SET Operator = 10 // 超集
	Operator_OPERATOR_SUB_SET   Operator = 11 // 子集
	Operator_OPERATOR_TRUE      Operator = 12 // true bool，也可以是人群包命中
	Operator_OPERATOR_FALSE     Operator = 13 // false bool，也可以是人群包不命中，取非
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0:  "OPERATOR_UNKNOWN",
		1:  "OPERATOR_EG",
		2:  "OPERATOR_LT",
		3:  "OPERATOR_LTE",
		4:  "OPERATOR_GT",
		5:  "OPERATOR_GTE",
		6:  "OPERATOR_NE",
		7:  "OPERATOR_REGULAR",
		8:  "OPERATOR_IN",
		9:  "OPERATOR_NOT_IN",
		10: "OPERATOR_SUPER_SET",
		11: "OPERATOR_SUB_SET",
		12: "OPERATOR_TRUE",
		13: "OPERATOR_FALSE",
	}
	Operator_value = map[string]int32{
		"OPERATOR_UNKNOWN":   0,
		"OPERATOR_EG":        1,
		"OPERATOR_LT":        2,
		"OPERATOR_LTE":       3,
		"OPERATOR_GT":        4,
		"OPERATOR_GTE":       5,
		"OPERATOR_NE":        6,
		"OPERATOR_REGULAR":   7,
		"OPERATOR_IN":        8,
		"OPERATOR_NOT_IN":    9,
		"OPERATOR_SUPER_SET": 10,
		"OPERATOR_SUB_SET":   11,
		"OPERATOR_TRUE":      12,
		"OPERATOR_FALSE":     13,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_tab_cache_server_proto_enumTypes[5].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_tab_cache_server_proto_enumTypes[5]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{5}
}

type TagType int32

const (
	TagType_TAG_TYPE_UNKNOWN TagType = 0
	TagType_TAG_TYPE_STRING  TagType = 1 // 字符串类型
	TagType_TAG_TYPE_NUMBER  TagType = 2 // 数值类型
	TagType_TAG_TYPE_ARRAY   TagType = 3 // array 类型
	TagType_TAG_TYPE_BOOLEAN TagType = 4 // bool 类型
	TagType_TAG_TYPE_DMP     TagType = 5 // 人群包类型，需要 rpc 请求用户画像信息
	TagType_TAG_TYPE_VERSION TagType = 6 // 版本号信息
)

// Enum value maps for TagType.
var (
	TagType_name = map[int32]string{
		0: "TAG_TYPE_UNKNOWN",
		1: "TAG_TYPE_STRING",
		2: "TAG_TYPE_NUMBER",
		3: "TAG_TYPE_ARRAY",
		4: "TAG_TYPE_BOOLEAN",
		5: "TAG_TYPE_DMP",
		6: "TAG_TYPE_VERSION",
	}
	TagType_value = map[string]int32{
		"TAG_TYPE_UNKNOWN": 0,
		"TAG_TYPE_STRING":  1,
		"TAG_TYPE_NUMBER":  2,
		"TAG_TYPE_ARRAY":   3,
		"TAG_TYPE_BOOLEAN": 4,
		"TAG_TYPE_DMP":     5,
		"TAG_TYPE_VERSION": 6,
	}
)

func (x TagType) Enum() *TagType {
	p := new(TagType)
	*p = x
	return p
}

func (x TagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TagType) Descriptor() protoreflect.EnumDescriptor {
	return file_tab_cache_server_proto_enumTypes[6].Descriptor()
}

func (TagType) Type() protoreflect.EnumType {
	return &file_tab_cache_server_proto_enumTypes[6]
}

func (x TagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TagType.Descriptor instead.
func (TagType) EnumDescriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{6}
}

// 下发类型
type IssueType int32

const (
	IssueType_ISSUE_TYPE_UNKNOWN    IssueType = 0
	IssueType_ISSUE_TYPE_PERCENTAGE IssueType = 1 // 按比例下发
	IssueType_ISSUE_TYPE_TAG        IssueType = 2 // 按标签下发
	IssueType_ISSUE_TYPE_CITY_TAG   IssueType = 3 // 按城市标签下发【每个实验组的标签都不一样】两个及以上实验组拥有相同标签：AaBb，建议同层设置两个互斥实验
)

// Enum value maps for IssueType.
var (
	IssueType_name = map[int32]string{
		0: "ISSUE_TYPE_UNKNOWN",
		1: "ISSUE_TYPE_PERCENTAGE",
		2: "ISSUE_TYPE_TAG",
		3: "ISSUE_TYPE_CITY_TAG",
	}
	IssueType_value = map[string]int32{
		"ISSUE_TYPE_UNKNOWN":    0,
		"ISSUE_TYPE_PERCENTAGE": 1,
		"ISSUE_TYPE_TAG":        2,
		"ISSUE_TYPE_CITY_TAG":   3,
	}
)

func (x IssueType) Enum() *IssueType {
	p := new(IssueType)
	*p = x
	return p
}

func (x IssueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueType) Descriptor() protoreflect.EnumDescriptor {
	return file_tab_cache_server_proto_enumTypes[7].Descriptor()
}

func (IssueType) Type() protoreflect.EnumType {
	return &file_tab_cache_server_proto_enumTypes[7]
}

func (x IssueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueType.Descriptor instead.
func (IssueType) EnumDescriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{7}
}

// 域类型
type DomainType int32

const (
	DomainType_DOMAIN_TYPE_UNKNOWN    DomainType = 0
	DomainType_DOMAIN_TYPE_DOMAIN     DomainType = 1 // 层域
	DomainType_DOMAIN_TYPE_HOLDOUT    DomainType = 2 // holdout 贯穿域，整体空白对照
	DomainType_DOMAIN_TYPE_MULTILAYER DomainType = 3 // 多层域，层与层正交，流量复用
)

// Enum value maps for DomainType.
var (
	DomainType_name = map[int32]string{
		0: "DOMAIN_TYPE_UNKNOWN",
		1: "DOMAIN_TYPE_DOMAIN",
		2: "DOMAIN_TYPE_HOLDOUT",
		3: "DOMAIN_TYPE_MULTILAYER",
	}
	DomainType_value = map[string]int32{
		"DOMAIN_TYPE_UNKNOWN":    0,
		"DOMAIN_TYPE_DOMAIN":     1,
		"DOMAIN_TYPE_HOLDOUT":    2,
		"DOMAIN_TYPE_MULTILAYER": 3,
	}
)

func (x DomainType) Enum() *DomainType {
	p := new(DomainType)
	*p = x
	return p
}

func (x DomainType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DomainType) Descriptor() protoreflect.EnumDescriptor {
	return file_tab_cache_server_proto_enumTypes[8].Descriptor()
}

func (DomainType) Type() protoreflect.EnumType {
	return &file_tab_cache_server_proto_enumTypes[8]
}

func (x DomainType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DomainType.Descriptor instead.
func (DomainType) EnumDescriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{8}
}

// 分流 ID 类型
type UnitIDType int32

const (
	UnitIDType_UNIT_ID_TYPE_UNKNOWN UnitIDType = 0
	UnitIDType_UNIT_ID_TYPE_DEFAULT UnitIDType = 1 // hash 使用默认的 unitID
	UnitIDType_UNIT_ID_TYPE_NEW_ID  UnitIDType = 2 // hash 使用 newID，没有 newID 使用 unitID
)

// Enum value maps for UnitIDType.
var (
	UnitIDType_name = map[int32]string{
		0: "UNIT_ID_TYPE_UNKNOWN",
		1: "UNIT_ID_TYPE_DEFAULT",
		2: "UNIT_ID_TYPE_NEW_ID",
	}
	UnitIDType_value = map[string]int32{
		"UNIT_ID_TYPE_UNKNOWN": 0,
		"UNIT_ID_TYPE_DEFAULT": 1,
		"UNIT_ID_TYPE_NEW_ID":  2,
	}
)

func (x UnitIDType) Enum() *UnitIDType {
	p := new(UnitIDType)
	*p = x
	return p
}

func (x UnitIDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitIDType) Descriptor() protoreflect.EnumDescriptor {
	return file_tab_cache_server_proto_enumTypes[9].Descriptor()
}

func (UnitIDType) Type() protoreflect.EnumType {
	return &file_tab_cache_server_proto_enumTypes[9]
}

func (x UnitIDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitIDType.Descriptor instead.
func (UnitIDType) EnumDescriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{9}
}

// 获取远程缓存服务配置信息
type GetTabConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCode string `protobuf:"bytes,1,opt,name=business_code,json=businessCode,proto3" json:"business_code,omitempty"` // 业务唯一标识
	Version      string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                               // 本地配置信息版本，用于补丁下发，version 为空拉取全量
	//  OriginType origin_type = 3; // 根据请求来源，返回差异化的配置信息
	UpdateType UpdateType `protobuf:"varint,4,opt,name=update_type,json=updateType,proto3,enum=opensource.tab.cache_server.UpdateType" json:"update_type,omitempty"` // 更新方式
}

func (x *GetTabConfigReq) Reset() {
	*x = GetTabConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTabConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabConfigReq) ProtoMessage() {}

func (x *GetTabConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabConfigReq.ProtoReflect.Descriptor instead.
func (*GetTabConfigReq) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{0}
}

func (x *GetTabConfigReq) GetBusinessCode() string {
	if x != nil {
		return x.BusinessCode
	}
	return ""
}

func (x *GetTabConfigReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetTabConfigReq) GetUpdateType() UpdateType {
	if x != nil {
		return x.UpdateType
	}
	return UpdateType_UPDATE_TYPE_UNKNOWN
}

// 获取缓存数据结果
type GetTabConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code             Code              `protobuf:"varint,1,opt,name=code,proto3,enum=opensource.tab.cache_server.Code" json:"code,omitempty"`             // 错误码
	Message          string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                              // 详细信息描述
	TabConfigManager *TabConfigManager `protobuf:"bytes,10,opt,name=tab_config_manager,json=tabConfigManager,proto3" json:"tab_config_manager,omitempty"` // 缓存数据
}

func (x *GetTabConfigResp) Reset() {
	*x = GetTabConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTabConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabConfigResp) ProtoMessage() {}

func (x *GetTabConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabConfigResp.ProtoReflect.Descriptor instead.
func (*GetTabConfigResp) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{1}
}

func (x *GetTabConfigResp) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_CODE_SUCCESS
}

func (x *GetTabConfigResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTabConfigResp) GetTabConfigManager() *TabConfigManager {
	if x != nil {
		return x.TabConfigManager
	}
	return nil
}

//白名单列表中 - 每一层映射的实验ID
type LayerToGroupID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key=layer_key，value= group ID
	LayerToGroupId map[string]int64 `protobuf:"bytes,1,rep,name=layer_to_group_id,json=layerToGroupId,proto3" json:"layer_to_group_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *LayerToGroupID) Reset() {
	*x = LayerToGroupID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayerToGroupID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerToGroupID) ProtoMessage() {}

func (x *LayerToGroupID) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerToGroupID.ProtoReflect.Descriptor instead.
func (*LayerToGroupID) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{2}
}

func (x *LayerToGroupID) GetLayerToGroupId() map[string]int64 {
	if x != nil {
		return x.LayerToGroupId
	}
	return nil
}

// 实验层域结构 // TODO 层域结构概念透出、封装、降门槛
type Domain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata             *DomainMetadata     `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                          // 元数据
	HoldoutDomainList    []*HoldoutDomain    `protobuf:"bytes,10,rep,name=holdout_domain_list,json=holdoutDomainList,proto3" json:"holdout_domain_list,omitempty"`            // 贯穿域列表 // TODO 本质是想部分人群走一个层就完事 命名
	MultiLayerDomainList []*MultiLayerDomain `protobuf:"bytes,11,rep,name=multi_layer_domain_list,json=multiLayerDomainList,proto3" json:"multi_layer_domain_list,omitempty"` // 多层域列表
	DomainList           []*Domain           `protobuf:"bytes,12,rep,name=domain_list,json=domainList,proto3" json:"domain_list,omitempty"`                                   // 嵌套的子域结构
}

func (x *Domain) Reset() {
	*x = Domain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Domain) ProtoMessage() {}

func (x *Domain) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Domain.ProtoReflect.Descriptor instead.
func (*Domain) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{3}
}

func (x *Domain) GetMetadata() *DomainMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Domain) GetHoldoutDomainList() []*HoldoutDomain {
	if x != nil {
		return x.HoldoutDomainList
	}
	return nil
}

func (x *Domain) GetMultiLayerDomainList() []*MultiLayerDomain {
	if x != nil {
		return x.MultiLayerDomainList
	}
	return nil
}

func (x *Domain) GetDomainList() []*Domain {
	if x != nil {
		return x.DomainList
	}
	return nil
}

// 实验层
type Layer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata        *LayerMetadata        `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	GroupList       []*Group              `protobuf:"bytes,10,rep,name=group_list,json=groupList,proto3" json:"group_list,omitempty"`                                                                                                            // 层下的实验组列表
	ExperimentIndex map[int64]*Experiment `protobuf:"bytes,11,rep,name=experiment_index,json=experimentIndex,proto3" json:"experiment_index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 层下实验列表索引,key为实验ID，value为实验
}

func (x *Layer) Reset() {
	*x = Layer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer) ProtoMessage() {}

func (x *Layer) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer.ProtoReflect.Descriptor instead.
func (*Layer) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{4}
}

func (x *Layer) GetMetadata() *LayerMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Layer) GetGroupList() []*Group {
	if x != nil {
		return x.GroupList
	}
	return nil
}

func (x *Layer) GetExperimentIndex() map[int64]*Experiment {
	if x != nil {
		return x.ExperimentIndex
	}
	return nil
}

// 实验信息
type Experiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashMethod HashMethod       `protobuf:"varint,1,opt,name=hash_method,json=hashMethod,proto3,enum=opensource.tab.cache_server.HashMethod" json:"hash_method,omitempty"`                                              // hash 方法
	HashSeed   int64            `protobuf:"varint,2,opt,name=hash_seed,json=hashSeed,proto3" json:"hash_seed,omitempty"`                                                                                                // 二次 hash 所用种子
	IssueType  IssueType        `protobuf:"varint,10,opt,name=issue_type,json=issueType,proto3,enum=opensource.tab.cache_server.IssueType" json:"issue_type,omitempty"`                                                 // 下发类型
	GroupIndex map[int64]*Group `protobuf:"bytes,11,rep,name=group_index,json=groupIndex,proto3" json:"group_index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 实验下的实验组索引
}

func (x *Experiment) Reset() {
	*x = Experiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Experiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Experiment) ProtoMessage() {}

func (x *Experiment) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Experiment.ProtoReflect.Descriptor instead.
func (*Experiment) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{5}
}

func (x *Experiment) GetHashMethod() HashMethod {
	if x != nil {
		return x.HashMethod
	}
	return HashMethod_HASH_METHOD_UNKNOWN
}

func (x *Experiment) GetHashSeed() int64 {
	if x != nil {
		return x.HashSeed
	}
	return 0
}

func (x *Experiment) GetIssueType() IssueType {
	if x != nil {
		return x.IssueType
	}
	return IssueType_ISSUE_TYPE_UNKNOWN
}

func (x *Experiment) GetGroupIndex() map[int64]*Group {
	if x != nil {
		return x.GroupIndex
	}
	return nil
}

// holdout 域信息
type HoldoutDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata  *DomainMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	LayerList []*Layer        `protobuf:"bytes,10,rep,name=layer_list,json=layerList,proto3" json:"layer_list,omitempty"` // holdout 域下的层，理论上只有一个，sdk 协议支持多个
}

func (x *HoldoutDomain) Reset() {
	*x = HoldoutDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldoutDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldoutDomain) ProtoMessage() {}

func (x *HoldoutDomain) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldoutDomain.ProtoReflect.Descriptor instead.
func (*HoldoutDomain) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{6}
}

func (x *HoldoutDomain) GetMetadata() *DomainMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HoldoutDomain) GetLayerList() []*Layer {
	if x != nil {
		return x.LayerList
	}
	return nil
}

// 多层域
type MultiLayerDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata  *DomainMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	LayerList []*Layer        `protobuf:"bytes,10,rep,name=layer_list,json=layerList,proto3" json:"layer_list,omitempty"` // 多层域下的层列表
}

func (x *MultiLayerDomain) Reset() {
	*x = MultiLayerDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLayerDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLayerDomain) ProtoMessage() {}

func (x *MultiLayerDomain) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLayerDomain.ProtoReflect.Descriptor instead.
func (*MultiLayerDomain) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{7}
}

func (x *MultiLayerDomain) GetMetadata() *DomainMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MultiLayerDomain) GetLayerList() []*Layer {
	if x != nil {
		return x.LayerList
	}
	return nil
}

// 实验下的实验组信息【对照组 or 实验组】
type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                // 实验组 ID
	GroupKey      string            `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`                                                                     // 实验组 key
	ExperimentId  int64             `protobuf:"varint,3,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`                                                        // 所属实验 ID
	ExperimentKey string            `protobuf:"bytes,4,opt,name=experiment_key,json=experimentKey,proto3" json:"experiment_key,omitempty"`                                                      // 所属实验 key
	Params        map[string]string `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // group 参数
	IsDefault     bool              `protobuf:"varint,6,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`                                                                 // 是否是默认实验
	IsControl     bool              `protobuf:"varint,7,opt,name=is_control,json=isControl,proto3" json:"is_control,omitempty"`                                                                 // 是否是对照组
	LayerKey      string            `protobuf:"bytes,8,opt,name=layer_key,json=layerKey,proto3" json:"layer_key,omitempty"`                                                                     // 冗余字段，存放所属层 key
	IssueInfo     *IssueInfo        `protobuf:"bytes,9,opt,name=issue_info,json=issueInfo,proto3" json:"issue_info,omitempty"`                                                                  // 下发信息
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{8}
}

func (x *Group) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Group) GetGroupKey() string {
	if x != nil {
		return x.GroupKey
	}
	return ""
}

func (x *Group) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *Group) GetExperimentKey() string {
	if x != nil {
		return x.ExperimentKey
	}
	return ""
}

func (x *Group) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Group) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *Group) GetIsControl() bool {
	if x != nil {
		return x.IsControl
	}
	return false
}

func (x *Group) GetLayerKey() string {
	if x != nil {
		return x.LayerKey
	}
	return ""
}

func (x *Group) GetIssueInfo() *IssueInfo {
	if x != nil {
		return x.IssueInfo
	}
	return nil
}

// 实验下发信息
type IssueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueType    IssueType  `protobuf:"varint,1,opt,name=issue_type,json=issueType,proto3,enum=opensource.tab.cache_server.IssueType" json:"issue_type,omitempty"` // 下发类型
	TagListGroup []*TagList `protobuf:"bytes,2,rep,name=tag_list_group,json=tagListGroup,proto3" json:"tag_list_group,omitempty"`                                  // tagList 之间或关系，tagList 里面 与关系 表达式  (A && B && C ...) || (a && b && c ...) || ...
}

func (x *IssueInfo) Reset() {
	*x = IssueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueInfo) ProtoMessage() {}

func (x *IssueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueInfo.ProtoReflect.Descriptor instead.
func (*IssueInfo) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{9}
}

func (x *IssueInfo) GetIssueType() IssueType {
	if x != nil {
		return x.IssueType
	}
	return IssueType_ISSUE_TYPE_UNKNOWN
}

func (x *IssueInfo) GetTagListGroup() []*TagList {
	if x != nil {
		return x.TagListGroup
	}
	return nil
}

type TagList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagList []*Tag `protobuf:"bytes,2,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"` // 与关系
}

func (x *TagList) Reset() {
	*x = TagList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagList) ProtoMessage() {}

func (x *TagList) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagList.ProtoReflect.Descriptor instead.
func (*TagList) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{10}
}

func (x *TagList) GetTagList() []*Tag {
	if x != nil {
		return x.TagList
	}
	return nil
}

// 标签
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                                                  // 标签 key，用户传入的标签 kv 中的 key，由此拿到用户标签值，跟当前配置标签值做对比
	TagType     TagType `protobuf:"varint,2,opt,name=tag_type,json=tagType,proto3,enum=opensource.tab.cache_server.TagType" json:"tag_type,omitempty"` // 字符串\数值\array\bool 等
	Operator    int64   `protobuf:"varint,3,opt,name=operator,proto3" json:"operator,omitempty"`                                                       // 操作符 lte\gte etc
	Value       string  `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`                                                              // 标签值，人群包类型标识人群包 key
	DmpPlatform int64   `protobuf:"varint,5,opt,name=dmp_platform,json=dmpPlatform,proto3" json:"dmp_platform,omitempty"`                              // 人群包判定系统 TODO 枚举
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{11}
}

func (x *Tag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tag) GetTagType() TagType {
	if x != nil {
		return x.TagType
	}
	return TagType_TAG_TYPE_UNKNOWN
}

func (x *Tag) GetOperator() int64 {
	if x != nil {
		return x.Operator
	}
	return 0
}

func (x *Tag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Tag) GetDmpPlatform() int64 {
	if x != nil {
		return x.DmpPlatform
	}
	return 0
}

// 域元数据
type DomainMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                                                              // key
	DomainType DomainType `protobuf:"varint,2,opt,name=domain_type,json=domainType,proto3,enum=opensource.tab.cache_server.DomainType" json:"domain_type,omitempty"` // 域类型
	HashMethod HashMethod `protobuf:"varint,3,opt,name=hash_method,json=hashMethod,proto3,enum=opensource.tab.cache_server.HashMethod" json:"hash_method,omitempty"` // hash 方法
	HashSeed   int64      `protobuf:"varint,4,opt,name=hash_seed,json=hashSeed,proto3" json:"hash_seed,omitempty"`                                                   // hash 种子 选大质数
	// UnitIDType decisionID 专门用于分流 + reportID N decisionID -> 1 unitID TODO
	UnitIdType       UnitIDType      `protobuf:"varint,5,opt,name=unit_id_type,json=unitIdType,proto3,enum=opensource.tab.cache_server.UnitIDType" json:"unit_id_type,omitempty"` // 分流使用的 ID 类型，用于分流ID（一般是账号体系）灰度切换使用 TODO
	TrafficRangeList []*TrafficRange `protobuf:"bytes,10,rep,name=traffic_range_list,json=trafficRangeList,proto3" json:"traffic_range_list,omitempty"`                           // 流量区间
}

func (x *DomainMetadata) Reset() {
	*x = DomainMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainMetadata) ProtoMessage() {}

func (x *DomainMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainMetadata.ProtoReflect.Descriptor instead.
func (*DomainMetadata) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{12}
}

func (x *DomainMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DomainMetadata) GetDomainType() DomainType {
	if x != nil {
		return x.DomainType
	}
	return DomainType_DOMAIN_TYPE_UNKNOWN
}

func (x *DomainMetadata) GetHashMethod() HashMethod {
	if x != nil {
		return x.HashMethod
	}
	return HashMethod_HASH_METHOD_UNKNOWN
}

func (x *DomainMetadata) GetHashSeed() int64 {
	if x != nil {
		return x.HashSeed
	}
	return 0
}

func (x *DomainMetadata) GetUnitIdType() UnitIDType {
	if x != nil {
		return x.UnitIdType
	}
	return UnitIDType_UNIT_ID_TYPE_UNKNOWN
}

func (x *DomainMetadata) GetTrafficRangeList() []*TrafficRange {
	if x != nil {
		return x.TrafficRangeList
	}
	return nil
}

// 层元数据
type LayerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DefaultGroup *Group     `protobuf:"bytes,2,opt,name=default_group,json=defaultGroup,proto3" json:"default_group,omitempty"`                                          // 层默认实验组
	HashType     HashType   `protobuf:"varint,3,opt,name=hash_type,json=hashType,proto3,enum=opensource.tab.cache_server.HashType" json:"hash_type,omitempty"`           // hash 类型
	HashMethod   HashMethod `protobuf:"varint,4,opt,name=hash_method,json=hashMethod,proto3,enum=opensource.tab.cache_server.HashMethod" json:"hash_method,omitempty"`   // hash 方法
	HashSeed     int64      `protobuf:"varint,5,opt,name=hash_seed,json=hashSeed,proto3" json:"hash_seed,omitempty"`                                                     // hash 种子
	SceneIdList  []int64    `protobuf:"varint,6,rep,packed,name=scene_id_list,json=sceneIdList,proto3" json:"scene_id_list,omitempty"`                                   // 场景列表，相当于染色，逻辑隔离
	UnitIdType   UnitIDType `protobuf:"varint,7,opt,name=unit_id_type,json=unitIdType,proto3,enum=opensource.tab.cache_server.UnitIDType" json:"unit_id_type,omitempty"` // 分流使用的 ID 类型，用于分流ID（一般是账号体系）灰度切换使用
	BucketNums   int64      `protobuf:"varint,10,opt,name=bucket_nums,json=bucketNums,proto3" json:"bucket_nums,omitempty"`                                              // 层桶数，100/1000/10000/100000
}

func (x *LayerMetadata) Reset() {
	*x = LayerMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerMetadata) ProtoMessage() {}

func (x *LayerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerMetadata.ProtoReflect.Descriptor instead.
func (*LayerMetadata) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{13}
}

func (x *LayerMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LayerMetadata) GetDefaultGroup() *Group {
	if x != nil {
		return x.DefaultGroup
	}
	return nil
}

func (x *LayerMetadata) GetHashType() HashType {
	if x != nil {
		return x.HashType
	}
	return HashType_HASH_TYPE_UNKNOWN
}

func (x *LayerMetadata) GetHashMethod() HashMethod {
	if x != nil {
		return x.HashMethod
	}
	return HashMethod_HASH_METHOD_UNKNOWN
}

func (x *LayerMetadata) GetHashSeed() int64 {
	if x != nil {
		return x.HashSeed
	}
	return 0
}

func (x *LayerMetadata) GetSceneIdList() []int64 {
	if x != nil {
		return x.SceneIdList
	}
	return nil
}

func (x *LayerMetadata) GetUnitIdType() UnitIDType {
	if x != nil {
		return x.UnitIdType
	}
	return UnitIDType_UNIT_ID_TYPE_UNKNOWN
}

func (x *LayerMetadata) GetBucketNums() int64 {
	if x != nil {
		return x.BucketNums
	}
	return 0
}

// 流量区间 范围 hashValue 在 (0, 10000] 区间内，命中 [left,right] 闭区间就算命中
type TrafficRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  int64 `protobuf:"varint,1,opt,name=left,proto3" json:"left,omitempty"`
	Right int64 `protobuf:"varint,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *TrafficRange) Reset() {
	*x = TrafficRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficRange) ProtoMessage() {}

func (x *TrafficRange) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficRange.ProtoReflect.Descriptor instead.
func (*TrafficRange) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{14}
}

func (x *TrafficRange) GetLeft() int64 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *TrafficRange) GetRight() int64 {
	if x != nil {
		return x.Right
	}
	return 0
}

// 实验缓存数据
type ExperimentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultGroupId int64                      `protobuf:"varint,1,opt,name=default_group_id,json=defaultGroupId,proto3" json:"default_group_id,omitempty"`                                                                                // 实验不命中默认的ID eg -1，既不命中实验也不命中层默认实验等，统一返回改 group ID
	OverrideList   map[string]*LayerToGroupID `protobuf:"bytes,2,rep,name=override_list,json=overrideList,proto3" json:"override_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 白名单 key=unitID value=<layer code, group id> 白名单信息
	GlobalDomain   *Domain                    `protobuf:"bytes,3,opt,name=global_domain,json=globalDomain,proto3" json:"global_domain,omitempty"`                                                                                         // 实验层域结构
}

func (x *ExperimentData) Reset() {
	*x = ExperimentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentData) ProtoMessage() {}

func (x *ExperimentData) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentData.ProtoReflect.Descriptor instead.
func (*ExperimentData) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{15}
}

func (x *ExperimentData) GetDefaultGroupId() int64 {
	if x != nil {
		return x.DefaultGroupId
	}
	return 0
}

func (x *ExperimentData) GetOverrideList() map[string]*LayerToGroupID {
	if x != nil {
		return x.OverrideList
	}
	return nil
}

func (x *ExperimentData) GetGlobalDomain() *Domain {
	if x != nil {
		return x.GlobalDomain
	}
	return nil
}

// 配置缓存数据
type ConfigData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigData) Reset() {
	*x = ConfigData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigData) ProtoMessage() {}

func (x *ConfigData) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigData.ProtoReflect.Descriptor instead.
func (*ConfigData) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{16}
}

// 系统控制信息缓存数据，business 下全局配置
type ControlData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ControlData) Reset() {
	*x = ControlData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlData) ProtoMessage() {}

func (x *ControlData) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlData.ProtoReflect.Descriptor instead.
func (*ControlData) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{17}
}

// 全量缓存数据
type TabConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentData *ExperimentData `protobuf:"bytes,1,opt,name=experiment_data,json=experimentData,proto3" json:"experiment_data,omitempty"`
	ConfigData     *ConfigData     `protobuf:"bytes,2,opt,name=config_data,json=configData,proto3" json:"config_data,omitempty"`    // 配置信息，开关相关也是基于配置，底层逻辑一致
	ControlData    *ControlData    `protobuf:"bytes,3,opt,name=control_data,json=controlData,proto3" json:"control_data,omitempty"` // business 下的全局配置信息
}

func (x *TabConfig) Reset() {
	*x = TabConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabConfig) ProtoMessage() {}

func (x *TabConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabConfig.ProtoReflect.Descriptor instead.
func (*TabConfig) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{18}
}

func (x *TabConfig) GetExperimentData() *ExperimentData {
	if x != nil {
		return x.ExperimentData
	}
	return nil
}

func (x *TabConfig) GetConfigData() *ConfigData {
	if x != nil {
		return x.ConfigData
	}
	return nil
}

func (x *TabConfig) GetControlData() *ControlData {
	if x != nil {
		return x.ControlData
	}
	return nil
}

// 缓存数据
type TabConfigManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessCode string `protobuf:"bytes,1,opt,name=business_code,json=businessCode,proto3" json:"business_code,omitempty"` // 业务唯一标识
	Version      string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                               // 本地配置信息版本，用于补丁下发，version 为空拉取全量
	//  OriginType origin_type = 3; // 根据请求来源，返回差异化的配置信息
	UpdateType     UpdateType `protobuf:"varint,4,opt,name=update_type,json=updateType,proto3,enum=opensource.tab.cache_server.UpdateType" json:"update_type,omitempty"` // 更新方式
	TabConfig      *TabConfig `protobuf:"bytes,10,opt,name=tab_config,json=tabConfig,proto3" json:"tab_config,omitempty"`                                                // 全量缓存数据
	TabConfigPatch []byte     `protobuf:"bytes,11,opt,name=tab_config_patch,json=tabConfigPatch,proto3" json:"tab_config_patch,omitempty"`                               // 增量更新模式下，新老版本的补丁包
}

func (x *TabConfigManager) Reset() {
	*x = TabConfigManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tab_cache_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabConfigManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabConfigManager) ProtoMessage() {}

func (x *TabConfigManager) ProtoReflect() protoreflect.Message {
	mi := &file_tab_cache_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabConfigManager.ProtoReflect.Descriptor instead.
func (*TabConfigManager) Descriptor() ([]byte, []int) {
	return file_tab_cache_server_proto_rawDescGZIP(), []int{19}
}

func (x *TabConfigManager) GetBusinessCode() string {
	if x != nil {
		return x.BusinessCode
	}
	return ""
}

func (x *TabConfigManager) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TabConfigManager) GetUpdateType() UpdateType {
	if x != nil {
		return x.UpdateType
	}
	return UpdateType_UPDATE_TYPE_UNKNOWN
}

func (x *TabConfigManager) GetTabConfig() *TabConfig {
	if x != nil {
		return x.TabConfig
	}
	return nil
}

func (x *TabConfigManager) GetTabConfigPatch() []byte {
	if x != nil {
		return x.TabConfigPatch
	}
	return nil
}

var File_tab_cache_server_proto protoreflect.FileDescriptor

var file_tab_cache_server_proto_rawDesc = []byte{
	0x0a, 0x16, 0x74, 0x61, 0x62, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x52, 0x10, 0x74, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x6a, 0x0a, 0x11, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x1a, 0x41, 0x0a, 0x13, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x02, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x13, 0x68,
	0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x11, 0x68, 0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xe3, 0x02, 0x0a, 0x05, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62,
	0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x6b, 0x0a, 0x14,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7, 0x02, 0x0a, 0x0a, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x12,
	0x45, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x1a, 0x61, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x48, 0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41,
	0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x41, 0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xa5, 0x03, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x01, 0x0a, 0x09, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x0e, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x74,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x46, 0x0a, 0x07, 0x74,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x74, 0x61, 0x67, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a,
	0x08, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62,
	0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x22, 0xf7, 0x02, 0x0a, 0x0e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x68, 0x61, 0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62,
	0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61,
	0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa5, 0x03,
	0x0a, 0x0d, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x47, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x42, 0x0a, 0x09, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48,
	0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x53, 0x65, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62,
	0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0x38, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22,
	0xd6, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0d,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x0c, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x6c, 0x0a, 0x11, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61,
	0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x0d, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf8, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x8c, 0x02, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x61, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x74, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x2a,
	0x55, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f,
	0x42, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x54, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x10, 0x02, 0x2a, 0xad, 0x01, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xe9, 0x07,
	0x12, 0x17, 0x0a, 0x12, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xea, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x10, 0xeb, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xec, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x10, 0xed, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x41, 0x4d,
	0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xd1, 0x0f, 0x2a, 0xab, 0x01, 0x0a,
	0x0a, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x42, 0x4b, 0x44, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4d, 0x55, 0x52, 0x4d, 0x55, 0x52,
	0x33, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x44, 0x4a, 0x42, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x41, 0x53, 0x48,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x04, 0x12, 0x17, 0x0a,
	0x13, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x45, 0x57,
	0x5f, 0x4d, 0x44, 0x35, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x41, 0x50, 0x10, 0x06, 0x2a, 0x4d, 0x0a, 0x08, 0x48, 0x61,
	0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x99, 0x02, 0x0a, 0x08, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x54, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x54,
	0x45, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x4e, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x09,
	0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x50,
	0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x0b, 0x12, 0x11,
	0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10,
	0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41,
	0x4c, 0x53, 0x45, 0x10, 0x0d, 0x2a, 0x9b, 0x01, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x41, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52,
	0x52, 0x41, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x41, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4d, 0x50, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x06, 0x2a, 0x6b, 0x0a, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x53, 0x53, 0x55,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47,
	0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x03,
	0x2a, 0x72, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48,
	0x4f, 0x4c, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x10, 0x03, 0x2a, 0x59, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x32,
	0x78, 0x0a, 0x09, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x6f, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x62, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tab_cache_server_proto_rawDescOnce sync.Once
	file_tab_cache_server_proto_rawDescData = file_tab_cache_server_proto_rawDesc
)

func file_tab_cache_server_proto_rawDescGZIP() []byte {
	file_tab_cache_server_proto_rawDescOnce.Do(func() {
		file_tab_cache_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_tab_cache_server_proto_rawDescData)
	})
	return file_tab_cache_server_proto_rawDescData
}

var file_tab_cache_server_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_tab_cache_server_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_tab_cache_server_proto_goTypes = []interface{}{
	(OriginType)(0),          // 0: opensource.tab.cache_server.OriginType
	(UpdateType)(0),          // 1: opensource.tab.cache_server.UpdateType
	(Code)(0),                // 2: opensource.tab.cache_server.Code
	(HashMethod)(0),          // 3: opensource.tab.cache_server.HashMethod
	(HashType)(0),            // 4: opensource.tab.cache_server.HashType
	(Operator)(0),            // 5: opensource.tab.cache_server.Operator
	(TagType)(0),             // 6: opensource.tab.cache_server.TagType
	(IssueType)(0),           // 7: opensource.tab.cache_server.IssueType
	(DomainType)(0),          // 8: opensource.tab.cache_server.DomainType
	(UnitIDType)(0),          // 9: opensource.tab.cache_server.UnitIDType
	(*GetTabConfigReq)(nil),  // 10: opensource.tab.cache_server.GetTabConfigReq
	(*GetTabConfigResp)(nil), // 11: opensource.tab.cache_server.GetTabConfigResp
	(*LayerToGroupID)(nil),   // 12: opensource.tab.cache_server.LayerToGroupID
	(*Domain)(nil),           // 13: opensource.tab.cache_server.Domain
	(*Layer)(nil),            // 14: opensource.tab.cache_server.Layer
	(*Experiment)(nil),       // 15: opensource.tab.cache_server.Experiment
	(*HoldoutDomain)(nil),    // 16: opensource.tab.cache_server.HoldoutDomain
	(*MultiLayerDomain)(nil), // 17: opensource.tab.cache_server.MultiLayerDomain
	(*Group)(nil),            // 18: opensource.tab.cache_server.Group
	(*IssueInfo)(nil),        // 19: opensource.tab.cache_server.IssueInfo
	(*TagList)(nil),          // 20: opensource.tab.cache_server.tagList
	(*Tag)(nil),              // 21: opensource.tab.cache_server.tag
	(*DomainMetadata)(nil),   // 22: opensource.tab.cache_server.DomainMetadata
	(*LayerMetadata)(nil),    // 23: opensource.tab.cache_server.LayerMetadata
	(*TrafficRange)(nil),     // 24: opensource.tab.cache_server.TrafficRange
	(*ExperimentData)(nil),   // 25: opensource.tab.cache_server.ExperimentData
	(*ConfigData)(nil),       // 26: opensource.tab.cache_server.ConfigData
	(*ControlData)(nil),      // 27: opensource.tab.cache_server.ControlData
	(*TabConfig)(nil),        // 28: opensource.tab.cache_server.TabConfig
	(*TabConfigManager)(nil), // 29: opensource.tab.cache_server.TabConfigManager
	nil,                      // 30: opensource.tab.cache_server.LayerToGroupID.LayerToGroupIdEntry
	nil,                      // 31: opensource.tab.cache_server.Layer.ExperimentIndexEntry
	nil,                      // 32: opensource.tab.cache_server.Experiment.GroupIndexEntry
	nil,                      // 33: opensource.tab.cache_server.Group.ParamsEntry
	nil,                      // 34: opensource.tab.cache_server.ExperimentData.OverrideListEntry
}
var file_tab_cache_server_proto_depIdxs = []int32{
	1,  // 0: opensource.tab.cache_server.GetTabConfigReq.update_type:type_name -> opensource.tab.cache_server.UpdateType
	2,  // 1: opensource.tab.cache_server.GetTabConfigResp.code:type_name -> opensource.tab.cache_server.Code
	29, // 2: opensource.tab.cache_server.GetTabConfigResp.tab_config_manager:type_name -> opensource.tab.cache_server.TabConfigManager
	30, // 3: opensource.tab.cache_server.LayerToGroupID.layer_to_group_id:type_name -> opensource.tab.cache_server.LayerToGroupID.LayerToGroupIdEntry
	22, // 4: opensource.tab.cache_server.Domain.metadata:type_name -> opensource.tab.cache_server.DomainMetadata
	16, // 5: opensource.tab.cache_server.Domain.holdout_domain_list:type_name -> opensource.tab.cache_server.HoldoutDomain
	17, // 6: opensource.tab.cache_server.Domain.multi_layer_domain_list:type_name -> opensource.tab.cache_server.MultiLayerDomain
	13, // 7: opensource.tab.cache_server.Domain.domain_list:type_name -> opensource.tab.cache_server.Domain
	23, // 8: opensource.tab.cache_server.Layer.metadata:type_name -> opensource.tab.cache_server.LayerMetadata
	18, // 9: opensource.tab.cache_server.Layer.group_list:type_name -> opensource.tab.cache_server.Group
	31, // 10: opensource.tab.cache_server.Layer.experiment_index:type_name -> opensource.tab.cache_server.Layer.ExperimentIndexEntry
	3,  // 11: opensource.tab.cache_server.Experiment.hash_method:type_name -> opensource.tab.cache_server.HashMethod
	7,  // 12: opensource.tab.cache_server.Experiment.issue_type:type_name -> opensource.tab.cache_server.IssueType
	32, // 13: opensource.tab.cache_server.Experiment.group_index:type_name -> opensource.tab.cache_server.Experiment.GroupIndexEntry
	22, // 14: opensource.tab.cache_server.HoldoutDomain.metadata:type_name -> opensource.tab.cache_server.DomainMetadata
	14, // 15: opensource.tab.cache_server.HoldoutDomain.layer_list:type_name -> opensource.tab.cache_server.Layer
	22, // 16: opensource.tab.cache_server.MultiLayerDomain.metadata:type_name -> opensource.tab.cache_server.DomainMetadata
	14, // 17: opensource.tab.cache_server.MultiLayerDomain.layer_list:type_name -> opensource.tab.cache_server.Layer
	33, // 18: opensource.tab.cache_server.Group.params:type_name -> opensource.tab.cache_server.Group.ParamsEntry
	19, // 19: opensource.tab.cache_server.Group.issue_info:type_name -> opensource.tab.cache_server.IssueInfo
	7,  // 20: opensource.tab.cache_server.IssueInfo.issue_type:type_name -> opensource.tab.cache_server.IssueType
	20, // 21: opensource.tab.cache_server.IssueInfo.tag_list_group:type_name -> opensource.tab.cache_server.tagList
	21, // 22: opensource.tab.cache_server.tagList.tag_list:type_name -> opensource.tab.cache_server.tag
	6,  // 23: opensource.tab.cache_server.tag.tag_type:type_name -> opensource.tab.cache_server.TagType
	8,  // 24: opensource.tab.cache_server.DomainMetadata.domain_type:type_name -> opensource.tab.cache_server.DomainType
	3,  // 25: opensource.tab.cache_server.DomainMetadata.hash_method:type_name -> opensource.tab.cache_server.HashMethod
	9,  // 26: opensource.tab.cache_server.DomainMetadata.unit_id_type:type_name -> opensource.tab.cache_server.UnitIDType
	24, // 27: opensource.tab.cache_server.DomainMetadata.traffic_range_list:type_name -> opensource.tab.cache_server.TrafficRange
	18, // 28: opensource.tab.cache_server.LayerMetadata.default_group:type_name -> opensource.tab.cache_server.Group
	4,  // 29: opensource.tab.cache_server.LayerMetadata.hash_type:type_name -> opensource.tab.cache_server.HashType
	3,  // 30: opensource.tab.cache_server.LayerMetadata.hash_method:type_name -> opensource.tab.cache_server.HashMethod
	9,  // 31: opensource.tab.cache_server.LayerMetadata.unit_id_type:type_name -> opensource.tab.cache_server.UnitIDType
	34, // 32: opensource.tab.cache_server.ExperimentData.override_list:type_name -> opensource.tab.cache_server.ExperimentData.OverrideListEntry
	13, // 33: opensource.tab.cache_server.ExperimentData.global_domain:type_name -> opensource.tab.cache_server.Domain
	25, // 34: opensource.tab.cache_server.TabConfig.experiment_data:type_name -> opensource.tab.cache_server.ExperimentData
	26, // 35: opensource.tab.cache_server.TabConfig.config_data:type_name -> opensource.tab.cache_server.ConfigData
	27, // 36: opensource.tab.cache_server.TabConfig.control_data:type_name -> opensource.tab.cache_server.ControlData
	1,  // 37: opensource.tab.cache_server.TabConfigManager.update_type:type_name -> opensource.tab.cache_server.UpdateType
	28, // 38: opensource.tab.cache_server.TabConfigManager.tab_config:type_name -> opensource.tab.cache_server.TabConfig
	15, // 39: opensource.tab.cache_server.Layer.ExperimentIndexEntry.value:type_name -> opensource.tab.cache_server.Experiment
	18, // 40: opensource.tab.cache_server.Experiment.GroupIndexEntry.value:type_name -> opensource.tab.cache_server.Group
	12, // 41: opensource.tab.cache_server.ExperimentData.OverrideListEntry.value:type_name -> opensource.tab.cache_server.LayerToGroupID
	10, // 42: opensource.tab.cache_server.APIServer.GetTabConfig:input_type -> opensource.tab.cache_server.GetTabConfigReq
	11, // 43: opensource.tab.cache_server.APIServer.GetTabConfig:output_type -> opensource.tab.cache_server.GetTabConfigResp
	43, // [43:44] is the sub-list for method output_type
	42, // [42:43] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_tab_cache_server_proto_init() }
func file_tab_cache_server_proto_init() {
	if File_tab_cache_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tab_cache_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTabConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTabConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayerToGroupID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Domain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Experiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldoutDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiLayerDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayerMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tab_cache_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabConfigManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tab_cache_server_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tab_cache_server_proto_goTypes,
		DependencyIndexes: file_tab_cache_server_proto_depIdxs,
		EnumInfos:         file_tab_cache_server_proto_enumTypes,
		MessageInfos:      file_tab_cache_server_proto_msgTypes,
	}.Build()
	File_tab_cache_server_proto = out.File
	file_tab_cache_server_proto_rawDesc = nil
	file_tab_cache_server_proto_goTypes = nil
	file_tab_cache_server_proto_depIdxs = nil
}
