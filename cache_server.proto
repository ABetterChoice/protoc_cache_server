syntax = "proto3";
package opensource.tab.cache_server;
// Note: go_package here specifies the address of the protocol repository on git, which should not be the same as the git repository address of the service above.
option go_package="github.com/abetterchoice/protoc_cache_server";

import "google/api/annotations.proto";

// Defining the service interface
service APIServer {
  rpc GetTabConfig (GetTabConfigReq) returns (GetTabConfigResp); // Get information about continuous experiments: experiments and remote configuration [single app dimension]
  rpc BatchGetExperimentBucket(BatchGetExperimentBucketReq) returns (BatchGetExperimentBucketResp); // Get experiment bucket information in batches. Only experiments on the double hash type layer have bucket information.
  rpc BatchGetGroupBucket(BatchGetGroupBucketReq) returns (BatchGetGroupBucketResp); // Get bucket information of experimental groups in batches
  // rpc ListTabConfig (ListTabConfigReq) returns (ListTabConfigResp); // Get information about continuous experiments: experiments and remote configuration [multiple app dimensions]
//   rpc BatchGetExpBucket (BatchGetExpBucketsReq) returns (BatchGetExpBucketsResp);  // Batch obtain the hash bucket information of the experiment
}

// Origin Type
enum OriginType {
  ORIGIN_TYPE_UNKNOWN = 0; // unknow
  ORIGIN_TYPE_SERVER = 1; // server
  ORIGIN_TYPE_MOBILE = 2; // terminal
}

// Update Type
enum UpdateType {
  UPDATE_TYPE_UNKNOWN = 0; // unknow
  UPDATE_TYPE_COMPLETE = 1; // COMPLETE
  UPDATE_YPE_DIFF = 2; // Incremental patches
}

// Get remote cache service configuration information
message GetTabConfigReq {
  string project_id = 1; // Business unique identifier
  string version = 2; // Local configuration information version, used for patch delivery. If version is empty, the full version will be pulled.
  UpdateType update_type = 4; // Update method
  string sdk_version = 5; // SDK version information, for example GO_1.6.0
  string region = 10; // Regional information, different configurations can be issued according to different regions
}

enum Code {
  CODE_SUCCESS = 0;                          // success
  CODE_NO_PERMISSION = 1001;                 // NO PERMISSION
  CODE_TRAFFIC_LIMIT = 1002;                 // TRAFFIC LIMIT
  CODE_INVALID_PROJECT_ID = 1003;            //  projectID error
  CODE_SERVER_ERR = 1004;                    // SERVER ERROR
  CODE_INVALID_PARAM = 1005;                 // INVALID PARAM
  CODE_SAME_VERSION = 2001;                  // SAME VERSION
}

// Get cached data results
message GetTabConfigResp {
  Code code = 1; // error code
  string message = 2; // Detailed description

  TabConfigManager tab_config_manager = 10; // Cached data
}

//Whitelist - Experiment IDs mapped at each layer
message LayerToGroupID{
  // key=layer_key，value= group ID
  map<string,int64> layer_to_group_id = 1;
}

// Experimental layer domain structure // TODO The concept of layer domain structure is revealed, encapsulated, and the threshold is lowered
message Domain {
  DomainMetadata metadata = 1; // metadata
  repeated HoldoutDomain holdout_domain_list = 10; // Run through domain list // TODO The essence is to let some people go through one level and be done with it.
  repeated MultiLayerDomain multi_layer_domain_list = 11; // Multi-layer domain list
  repeated Domain domain_list = 12; // Nested subdomain structure
}

// Experimental Layer
message Layer {
  LayerMetadata metadata = 1;
  map<int64, Group> group_index = 10; // Experiment group index under the layer
  map<int64, Experiment> experiment_index = 11; // The index of the experiment list under the layer, the key is the experiment ID, and the value is the experiment
}

// Experimental information
message Experiment {
  HashMethod hash_method = 1; // hash method
  int64 hash_seed = 2; // The seed used for the second hash
  int64 id = 3; // experiment ID
  string key = 4; // experiment key
  int64 bucket_size = 5; // Number of experimental barrels，100/1000/10000/100000
  IssueType issue_type = 10; // Issue Type
  map<int64, bool> group_id_index = 11; // The experimental group index under the experiment, the key is groupID, and the value is always true
}

// hash method
enum HashMethod {
  HASH_METHOD_UNKNOWN = 0;
  HASH_METHOD_BKDR = 1; // bkdr hash
  HASH_METHOD_MURMUR3 = 2; // murmur3
  HASH_METHOD_DJB = 3; // djb
  HASH_METHOD_NEW = 4; // new
  HASH_METHOD_NEW_MD5 = 5; // new md5
  HASH_METHOD_AP = 6; // ap
}

enum HashType {
  HASH_TYPE_UNKNOWN = 0;
  HASH_TYPE_SINGLE = 1; // Single hash, do a hash once after entering the layer, and directly determine the hit group
  HASH_TYPE_DOUBLE = 2; // Double hashing: do a hash once after entering the layer to determine the hit experiment, and do another hash within the experiment to determine the hit group
}

// holdout
message HoldoutDomain {
  DomainMetadata metadata = 1;
  repeated Layer layer_list = 10; // holdout Theoretically, there is only one layer under the holdout domain, but the SDK protocol supports multiple
}

// MultiLayerDomain
message MultiLayerDomain {
  DomainMetadata metadata = 1;
  repeated Layer layer_list = 10; // layer_list
}

// Experimental group information under the experiment [control group or experimental group]
message Group {
  int64 id = 1; // Experimental group ID
  string group_key = 2; // Experimental group key
  int64 experiment_id = 3; // experiment ID
  string experiment_key = 4; // experiment key
  map<string, string> params = 5; // group param
  bool is_default = 6; // is_default
  bool is_control = 7; // is_control
  string layer_key = 8; // Redundant field, storing the layer key
  IssueInfo issue_info = 9; // Send information
  repeated int64 scene_id_list = 10; // scene id list
  UnitIDType unit_id_type = 11; // Redundant fields, account ID system
}

// Experimental information release
message IssueInfo {
  IssueType issue_type = 1; // issue type
  repeated tagList tag_list_group = 2; // The or relationship between tagList, and the and relationship expression in tagList (A && B && C ...) || (a && b && c ...) || ...
}

message tagList {
  repeated tag tag_list = 2; //
}

enum TagOrigin {
  TAG_ORIGIN_UNKNOWN = 0; // unknown
  TAG_ORIGIN_TAG = 1; // 普通标签
  TAG_ORIGIN_DMP = 2; // 人群包
}

// tag
message tag {
  string key = 1; // tag key，The key in the label kv passed by the user is used to obtain the user label value and compare it with the current configuration label value
  TagType tag_type = 2; // 字string\value\array\bool etc.
  Operator operator = 3; // operator lte\gte etc
  string value = 4; // Tag value, crowd package type identifier crowd package key
  int64 dmp_platform = 5; // Crowd pack determination system TODO enum
  UnitIDType unit_id_type = 6; // unit id type
  TagOrigin tag_origin = 7; // 标签来源
}

// operator
enum Operator {
  OPERATOR_UNKNOWN = 0;
  OPERATOR_EQ = 1; // equal
  OPERATOR_LT = 2; // Less than
  OPERATOR_LTE = 3; // Less than or equal to
  OPERATOR_GT = 4; // more than
  OPERATOR_GTE = 5; // greater or equal to
  OPERATOR_NE = 6; // not equal to
  OPERATOR_REGULAR = 7; // Regular
  OPERATOR_IN = 8; // Exists in array
  OPERATOR_NOT_IN = 9; // not exist in the array
  OPERATOR_SUPER_SET = 10; // Superset
  OPERATOR_SUB_SET = 11; // Subset
  OPERATOR_TRUE = 12; // true bool，It can also be a crowd package hit
  OPERATOR_FALSE = 13; // false bool，It can also be that the crowd package does not hit, take non
  OPERATOR_LORO = 14; // Although it can be expressed by Left < X && X < Right, since this is a common expression, we provide interval calculation.
  OPERATOR_LORC = 15; // Left open right closed
  OPERATOR_LCRO = 16; // Left closed, right open
  OPERATOR_LCRC = 17; // Left closed right closed
  OPERATOR_EMPTY = 18; // Empty: the tag value passed in by the user is empty
  OPERATOR_NOT_EMPTY = 19; // Not empty. The tag value passed in by the user is not empty.
}

enum TagType {
  TAG_TYPE_UNKNOWN = 0;
  TAG_TYPE_STRING = 1; // string
  TAG_TYPE_NUMBER = 2; // number
  TAG_TYPE_SET = 3; // set
  TAG_TYPE_BOOLEAN = 4; // bool
  TAG_TYPE_DMP = 5;
  TAG_TYPE_VERSION = 6;
  TAG_TYPE_EMPTY = 7;
}

enum IssueType {
  ISSUE_TYPE_UNKNOWN = 0;
  ISSUE_TYPE_PERCENTAGE = 1;
  ISSUE_TYPE_TAG = 2;
  ISSUE_TYPE_CITY_TAG = 3;
}


enum DomainType {
  DOMAIN_TYPE_UNKNOWN = 0;
  DOMAIN_TYPE_DOMAIN = 1;
  DOMAIN_TYPE_HOLDOUT = 2;
  DOMAIN_TYPE_MULTILAYER = 3;
}


enum UnitIDType {
  UNIT_ID_TYPE_UNKNOWN = 0;
  UNIT_ID_TYPE_DEFAULT = 1;
  UNIT_ID_TYPE_NEW_ID = 2;
}


message DomainMetadata {
  string key = 1; // key
  DomainType domain_type = 2;
  HashMethod hash_method = 3; // hash
  int64 hash_seed = 4; // hash
  // UnitIDType decisionID Special for diversion + reportID N decisionID -> 1 unitID TODO
  UnitIDType unit_id_type = 5; // The ID type used for diversion, used for grayscale switching of diversion ID (usually account system) TODO
  int64 bucket_size = 6; // Number of layer buckets, 100/1000/10000/100000, traffic segmentation granularity of the domain
  repeated TrafficRange traffic_range_list = 10; // traffic range
}

message LayerMetadata {
  string key = 1;
  Group default_group = 2;
  HashType hash_type = 3; // hash type
  HashMethod hash_method = 4; // hash
  int64 hash_seed = 5; // hash seed
  repeated int64 scene_id_list = 6;
  UnitIDType unit_id_type = 7;
  repeated TrafficRange traffic_range_list = 8; // TODO No, traffic is controlled by the domain
  int64 bucket_size = 10; // bucket size，100/1000/10000/100000
  repeated string holdout_layer_keys = 11; // Mounted holdout layers, judging from left to right, web guarantees that there will be no loops Layer A holdout layer B, .., layer B holdout layer A
  LayerType layer_type = 12; // layer type
}

enum LayerType {
    LAYER_ORIGIN_UNKNOWN = 0;
    LAYER_ORIGIN_EXP = 1;
    LAYER_ORIGIN_CONFIG = 2;
    LAYER_ORIGIN_HOLDOUT = 3;
}

// Traffic interval range hashValue is in the interval (0, bucket_size], and hitting the closed interval [left,right] is considered a hit
message TrafficRange {
  int64 left = 1;
  int64 right = 2;
}

message ExperimentData {
  int64  default_group_id = 1;
  map<string, LayerToGroupID> override_list = 2;

  Domain global_domain = 3;
  HoldoutData holdout_data = 4;
}

message HoldoutData {
  map<string, Layer> holdout_layer_index = 1;
}


message RemoteConfigData {
  map<string, RemoteConfig> remote_config_index = 1;
}


message RemoteConfig {
  string key = 1;
  bytes default_value = 2;
  string version = 3;
  repeated int64 scene_id_list = 4;
  RemoteConfigValueType type = 5;
  repeated Condition condition_list = 6;
  map<string, bytes> override_list = 10;
  repeated string holdout_layer_keys = 11;
}

message Condition {
  int64 id = 1;
  string key = 2;
  bytes value = 3;
  HashMethod hash_method = 4;
  int64 hash_seed = 5;
  string experiment_key = 6;
  int64 bucket_size = 7;
  BucketInfo bucket_info = 8;
  UnitIDType unit_id_type = 9;
  IssueInfo issue_info = 10;
  string config_key = 11;
}


enum RemoteConfigValueType {
  REMOTE_CONFIG_VALUE_TYPE_UNKNOWN = 0;
  REMOTE_CONFIG_VALUE_TYPE_BOOL = 1;
  REMOTE_CONFIG_VALUE_TYPE_BYTES = 2;
  REMOTE_CONFIG_VALUE_TYPE_URL = 3;
}


message ControlData {
  uint32 refresh_interval = 1;
  map<int64, bool> ignore_report_group_id = 2;

  map<int64, MetricsConfig> experiment_metrics_config = 3;
  MetricsConfig default_experiment_metrics_config = 4;

  map<int64, MetricsConfig> remote_config_metrics_config = 5;
  MetricsConfig default_remote_config_metrics_config = 6;

  map<int64, MetricsConfig> feature_flag_metrics_config = 7;
  MetricsConfig default_feature_flag_metrics_config = 8;

  MetricsConfig event_metrics_config = 9;
  map<string, MetricsInitConfig> metrics_init_config_index = 10;
}


message MetricsConfig {
  bool is_automatic = 1;
  bool is_enable = 2;
  string plugin_name = 3;
  int64 scene_id = 4;
  uint32 sampling_interval = 5;
  uint32 err_sampling_interval = 6;
  MetricsMetadata metadata = 10;
}


message MetricsInitConfig {
  string Region = 1;
  string addr = 2;
  map<string, string> kv = 3;
}

message MetricsMetadata {
  map<string, string> expanded_data = 1;
  string name = 2;
  string id = 3;
  string token = 4;
}


message TabConfig {
  ExperimentData experiment_data = 1;
  RemoteConfigData config_data = 2;
  ControlData control_data = 3;
}


message TabConfigManager {
  string project_id = 1;
  string version = 2;
//  OriginType origin_type = 3;
  UpdateType update_type = 4;

  TabConfig tab_config = 10;
  bytes tab_config_patch = 11;
}

// bitmap or range
enum BucketType {
  BUCKET_TYPE_UNKNOWN = 0;
  BUCKET_TYPE_BITMAP = 1; // bitmap
  BUCKET_TYPE_RANGE = 2;
}


enum ModifyType {
  MODIFY_UNKNOWN = 0;
  MODIFY_UPDATE = 1;
  MODIFY_DELETE = 2;
}


message BucketInfo {
  BucketType bucket_type = 1;
  TrafficRange traffic_range = 2;
  bytes bitmap = 3;
  string version = 4;
  ModifyType modify_type = 5;
}


message BatchGetExperimentBucketReq {
  string project_id = 1;
  string sdk_version = 2;
  map<int64, string> bucket_version_index = 3;
}

// Get experimental bucket information in batches
message BatchGetExperimentBucketResp {
  Code code = 1; // error code
  string message = 2; // Detailed description
  map<int64, BucketInfo> bucketIndex = 3; // Experiment bucket index, key is the experiment ID, only returns the experiment bucket information with changed version number
}

// Get experimental group bucket information in batches
message BatchGetGroupBucketReq {
  string project_id = 1; // project id
  string sdk_version = 2; // sdk version
  map<int64, string> bucket_version_index = 3; // Experiment group ID and version index, key is the experiment group ID
}

// Get experimental group bucket information in batches
message BatchGetGroupBucketResp {
  Code code = 1; // error code
  string message = 2; // Detailed description
  map<int64, BucketInfo> bucketIndex = 3; // Experiment group bucket index, key is the experiment group ID, only returns the experiment bucket information with changed version number
}
