// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.29.1
// source: cache_server.proto

package protoc_cache_server

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Origin Type
type OriginType int32

const (
	OriginType_ORIGIN_TYPE_UNKNOWN OriginType = 0 // unknow
	OriginType_ORIGIN_TYPE_SERVER  OriginType = 1 // server
	OriginType_ORIGIN_TYPE_MOBILE  OriginType = 2 // terminal
)

// Enum value maps for OriginType.
var (
	OriginType_name = map[int32]string{
		0: "ORIGIN_TYPE_UNKNOWN",
		1: "ORIGIN_TYPE_SERVER",
		2: "ORIGIN_TYPE_MOBILE",
	}
	OriginType_value = map[string]int32{
		"ORIGIN_TYPE_UNKNOWN": 0,
		"ORIGIN_TYPE_SERVER":  1,
		"ORIGIN_TYPE_MOBILE":  2,
	}
)

func (x OriginType) Enum() *OriginType {
	p := new(OriginType)
	*p = x
	return p
}

func (x OriginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OriginType) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[0].Descriptor()
}

func (OriginType) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[0]
}

func (x OriginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OriginType.Descriptor instead.
func (OriginType) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{0}
}

// Update Type
type UpdateType int32

const (
	UpdateType_UPDATE_TYPE_UNKNOWN  UpdateType = 0 // unknow
	UpdateType_UPDATE_TYPE_COMPLETE UpdateType = 1 // COMPLETE
	UpdateType_UPDATE_YPE_DIFF      UpdateType = 2 // Incremental patches
)

// Enum value maps for UpdateType.
var (
	UpdateType_name = map[int32]string{
		0: "UPDATE_TYPE_UNKNOWN",
		1: "UPDATE_TYPE_COMPLETE",
		2: "UPDATE_YPE_DIFF",
	}
	UpdateType_value = map[string]int32{
		"UPDATE_TYPE_UNKNOWN":  0,
		"UPDATE_TYPE_COMPLETE": 1,
		"UPDATE_YPE_DIFF":      2,
	}
)

func (x UpdateType) Enum() *UpdateType {
	p := new(UpdateType)
	*p = x
	return p
}

func (x UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[1].Descriptor()
}

func (UpdateType) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[1]
}

func (x UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateType.Descriptor instead.
func (UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{1}
}

type Code int32

const (
	Code_CODE_SUCCESS            Code = 0    // success
	Code_CODE_NO_PERMISSION      Code = 1001 // NO PERMISSION
	Code_CODE_TRAFFIC_LIMIT      Code = 1002 // TRAFFIC LIMIT
	Code_CODE_INVALID_PROJECT_ID Code = 1003 //  projectID error
	Code_CODE_SERVER_ERR         Code = 1004 // SERVER ERROR
	Code_CODE_INVALID_PARAM      Code = 1005 // INVALID PARAM
	Code_CODE_SAME_VERSION       Code = 2001 // SAME VERSION
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0:    "CODE_SUCCESS",
		1001: "CODE_NO_PERMISSION",
		1002: "CODE_TRAFFIC_LIMIT",
		1003: "CODE_INVALID_PROJECT_ID",
		1004: "CODE_SERVER_ERR",
		1005: "CODE_INVALID_PARAM",
		2001: "CODE_SAME_VERSION",
	}
	Code_value = map[string]int32{
		"CODE_SUCCESS":            0,
		"CODE_NO_PERMISSION":      1001,
		"CODE_TRAFFIC_LIMIT":      1002,
		"CODE_INVALID_PROJECT_ID": 1003,
		"CODE_SERVER_ERR":         1004,
		"CODE_INVALID_PARAM":      1005,
		"CODE_SAME_VERSION":       2001,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[2].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[2]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{2}
}

// hash method
type HashMethod int32

const (
	HashMethod_HASH_METHOD_UNKNOWN HashMethod = 0
	HashMethod_HASH_METHOD_BKDR    HashMethod = 1 // bkdr hash
	HashMethod_HASH_METHOD_MURMUR3 HashMethod = 2 // murmur3
	HashMethod_HASH_METHOD_DJB     HashMethod = 3 // djb
	HashMethod_HASH_METHOD_NEW     HashMethod = 4 // new
	HashMethod_HASH_METHOD_NEW_MD5 HashMethod = 5 // new md5
	HashMethod_HASH_METHOD_AP      HashMethod = 6 // ap
)

// Enum value maps for HashMethod.
var (
	HashMethod_name = map[int32]string{
		0: "HASH_METHOD_UNKNOWN",
		1: "HASH_METHOD_BKDR",
		2: "HASH_METHOD_MURMUR3",
		3: "HASH_METHOD_DJB",
		4: "HASH_METHOD_NEW",
		5: "HASH_METHOD_NEW_MD5",
		6: "HASH_METHOD_AP",
	}
	HashMethod_value = map[string]int32{
		"HASH_METHOD_UNKNOWN": 0,
		"HASH_METHOD_BKDR":    1,
		"HASH_METHOD_MURMUR3": 2,
		"HASH_METHOD_DJB":     3,
		"HASH_METHOD_NEW":     4,
		"HASH_METHOD_NEW_MD5": 5,
		"HASH_METHOD_AP":      6,
	}
)

func (x HashMethod) Enum() *HashMethod {
	p := new(HashMethod)
	*p = x
	return p
}

func (x HashMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[3].Descriptor()
}

func (HashMethod) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[3]
}

func (x HashMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashMethod.Descriptor instead.
func (HashMethod) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{3}
}

type HashType int32

const (
	HashType_HASH_TYPE_UNKNOWN HashType = 0
	HashType_HASH_TYPE_SINGLE  HashType = 1 // Single hash, do a hash once after entering the layer, and directly determine the hit group
	HashType_HASH_TYPE_DOUBLE  HashType = 2 // Double hashing: do a hash once after entering the layer to determine the hit experiment, and do another hash within the experiment to determine the hit group
)

// Enum value maps for HashType.
var (
	HashType_name = map[int32]string{
		0: "HASH_TYPE_UNKNOWN",
		1: "HASH_TYPE_SINGLE",
		2: "HASH_TYPE_DOUBLE",
	}
	HashType_value = map[string]int32{
		"HASH_TYPE_UNKNOWN": 0,
		"HASH_TYPE_SINGLE":  1,
		"HASH_TYPE_DOUBLE":  2,
	}
)

func (x HashType) Enum() *HashType {
	p := new(HashType)
	*p = x
	return p
}

func (x HashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashType) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[4].Descriptor()
}

func (HashType) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[4]
}

func (x HashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashType.Descriptor instead.
func (HashType) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{4}
}

type TagOrigin int32

const (
	TagOrigin_TAG_ORIGIN_UNKNOWN TagOrigin = 0 // unknown
	TagOrigin_TAG_ORIGIN_TAG     TagOrigin = 1 // 普通标签
	TagOrigin_TAG_ORIGIN_DMP     TagOrigin = 2 // 人群包
)

// Enum value maps for TagOrigin.
var (
	TagOrigin_name = map[int32]string{
		0: "TAG_ORIGIN_UNKNOWN",
		1: "TAG_ORIGIN_TAG",
		2: "TAG_ORIGIN_DMP",
	}
	TagOrigin_value = map[string]int32{
		"TAG_ORIGIN_UNKNOWN": 0,
		"TAG_ORIGIN_TAG":     1,
		"TAG_ORIGIN_DMP":     2,
	}
)

func (x TagOrigin) Enum() *TagOrigin {
	p := new(TagOrigin)
	*p = x
	return p
}

func (x TagOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TagOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[5].Descriptor()
}

func (TagOrigin) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[5]
}

func (x TagOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TagOrigin.Descriptor instead.
func (TagOrigin) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{5}
}

// operator
type Operator int32

const (
	Operator_OPERATOR_UNKNOWN           Operator = 0
	Operator_OPERATOR_EQ                Operator = 1  // equal
	Operator_OPERATOR_LT                Operator = 2  // Less than
	Operator_OPERATOR_LTE               Operator = 3  // Less than or equal to
	Operator_OPERATOR_GT                Operator = 4  // more than
	Operator_OPERATOR_GTE               Operator = 5  // greater or equal to
	Operator_OPERATOR_NE                Operator = 6  // not equal to
	Operator_OPERATOR_REGULAR           Operator = 7  // Regular
	Operator_OPERATOR_IN                Operator = 8  // Exists in array
	Operator_OPERATOR_NOT_IN            Operator = 9  // not exist in the array
	Operator_OPERATOR_SUPER_SET         Operator = 10 // Superset
	Operator_OPERATOR_SUB_SET           Operator = 11 // Subset
	Operator_OPERATOR_TRUE              Operator = 12 // true bool，It can also be a crowd package hit
	Operator_OPERATOR_FALSE             Operator = 13 // false bool，It can also be that the crowd package does not hit, take non
	Operator_OPERATOR_LORO              Operator = 14 // Although it can be expressed by Left < X && X < Right, since this is a common expression, we provide interval calculation.
	Operator_OPERATOR_LORC              Operator = 15 // Left open right closed
	Operator_OPERATOR_LCRO              Operator = 16 // Left closed, right open
	Operator_OPERATOR_LCRC              Operator = 17 // Left closed right closed
	Operator_OPERATOR_EMPTY             Operator = 18 // Empty: the tag value passed in by the user is empty
	Operator_OPERATOR_NOT_EMPTY         Operator = 19 // Not empty. The tag value passed in by the user is not empty.
	Operator_Operator_OPERATOR_LIKE     Operator = 20 // Like: The tag value passed in by the user contains the specified substring.
	Operator_Operator_OPERATOR_NOT_LIKE Operator = 21 // Not Like: The tag value passed in by the user does not contain the specified substring.
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0:  "OPERATOR_UNKNOWN",
		1:  "OPERATOR_EQ",
		2:  "OPERATOR_LT",
		3:  "OPERATOR_LTE",
		4:  "OPERATOR_GT",
		5:  "OPERATOR_GTE",
		6:  "OPERATOR_NE",
		7:  "OPERATOR_REGULAR",
		8:  "OPERATOR_IN",
		9:  "OPERATOR_NOT_IN",
		10: "OPERATOR_SUPER_SET",
		11: "OPERATOR_SUB_SET",
		12: "OPERATOR_TRUE",
		13: "OPERATOR_FALSE",
		14: "OPERATOR_LORO",
		15: "OPERATOR_LORC",
		16: "OPERATOR_LCRO",
		17: "OPERATOR_LCRC",
		18: "OPERATOR_EMPTY",
		19: "OPERATOR_NOT_EMPTY",
		20: "Operator_OPERATOR_LIKE",
		21: "Operator_OPERATOR_NOT_LIKE",
	}
	Operator_value = map[string]int32{
		"OPERATOR_UNKNOWN":           0,
		"OPERATOR_EQ":                1,
		"OPERATOR_LT":                2,
		"OPERATOR_LTE":               3,
		"OPERATOR_GT":                4,
		"OPERATOR_GTE":               5,
		"OPERATOR_NE":                6,
		"OPERATOR_REGULAR":           7,
		"OPERATOR_IN":                8,
		"OPERATOR_NOT_IN":            9,
		"OPERATOR_SUPER_SET":         10,
		"OPERATOR_SUB_SET":           11,
		"OPERATOR_TRUE":              12,
		"OPERATOR_FALSE":             13,
		"OPERATOR_LORO":              14,
		"OPERATOR_LORC":              15,
		"OPERATOR_LCRO":              16,
		"OPERATOR_LCRC":              17,
		"OPERATOR_EMPTY":             18,
		"OPERATOR_NOT_EMPTY":         19,
		"Operator_OPERATOR_LIKE":     20,
		"Operator_OPERATOR_NOT_LIKE": 21,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[6].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[6]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{6}
}

type TagType int32

const (
	TagType_TAG_TYPE_UNKNOWN TagType = 0
	TagType_TAG_TYPE_STRING  TagType = 1 // string
	TagType_TAG_TYPE_NUMBER  TagType = 2 // number
	TagType_TAG_TYPE_SET     TagType = 3 // set
	TagType_TAG_TYPE_BOOLEAN TagType = 4 // bool
	TagType_TAG_TYPE_DMP     TagType = 5
	TagType_TAG_TYPE_VERSION TagType = 6
	TagType_TAG_TYPE_EMPTY   TagType = 7
)

// Enum value maps for TagType.
var (
	TagType_name = map[int32]string{
		0: "TAG_TYPE_UNKNOWN",
		1: "TAG_TYPE_STRING",
		2: "TAG_TYPE_NUMBER",
		3: "TAG_TYPE_SET",
		4: "TAG_TYPE_BOOLEAN",
		5: "TAG_TYPE_DMP",
		6: "TAG_TYPE_VERSION",
		7: "TAG_TYPE_EMPTY",
	}
	TagType_value = map[string]int32{
		"TAG_TYPE_UNKNOWN": 0,
		"TAG_TYPE_STRING":  1,
		"TAG_TYPE_NUMBER":  2,
		"TAG_TYPE_SET":     3,
		"TAG_TYPE_BOOLEAN": 4,
		"TAG_TYPE_DMP":     5,
		"TAG_TYPE_VERSION": 6,
		"TAG_TYPE_EMPTY":   7,
	}
)

func (x TagType) Enum() *TagType {
	p := new(TagType)
	*p = x
	return p
}

func (x TagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TagType) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[7].Descriptor()
}

func (TagType) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[7]
}

func (x TagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TagType.Descriptor instead.
func (TagType) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{7}
}

type IssueType int32

const (
	IssueType_ISSUE_TYPE_UNKNOWN    IssueType = 0
	IssueType_ISSUE_TYPE_PERCENTAGE IssueType = 1
	IssueType_ISSUE_TYPE_TAG        IssueType = 2
	IssueType_ISSUE_TYPE_CITY_TAG   IssueType = 3
)

// Enum value maps for IssueType.
var (
	IssueType_name = map[int32]string{
		0: "ISSUE_TYPE_UNKNOWN",
		1: "ISSUE_TYPE_PERCENTAGE",
		2: "ISSUE_TYPE_TAG",
		3: "ISSUE_TYPE_CITY_TAG",
	}
	IssueType_value = map[string]int32{
		"ISSUE_TYPE_UNKNOWN":    0,
		"ISSUE_TYPE_PERCENTAGE": 1,
		"ISSUE_TYPE_TAG":        2,
		"ISSUE_TYPE_CITY_TAG":   3,
	}
)

func (x IssueType) Enum() *IssueType {
	p := new(IssueType)
	*p = x
	return p
}

func (x IssueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueType) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[8].Descriptor()
}

func (IssueType) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[8]
}

func (x IssueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueType.Descriptor instead.
func (IssueType) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{8}
}

type DomainType int32

const (
	DomainType_DOMAIN_TYPE_UNKNOWN    DomainType = 0
	DomainType_DOMAIN_TYPE_DOMAIN     DomainType = 1
	DomainType_DOMAIN_TYPE_HOLDOUT    DomainType = 2
	DomainType_DOMAIN_TYPE_MULTILAYER DomainType = 3
)

// Enum value maps for DomainType.
var (
	DomainType_name = map[int32]string{
		0: "DOMAIN_TYPE_UNKNOWN",
		1: "DOMAIN_TYPE_DOMAIN",
		2: "DOMAIN_TYPE_HOLDOUT",
		3: "DOMAIN_TYPE_MULTILAYER",
	}
	DomainType_value = map[string]int32{
		"DOMAIN_TYPE_UNKNOWN":    0,
		"DOMAIN_TYPE_DOMAIN":     1,
		"DOMAIN_TYPE_HOLDOUT":    2,
		"DOMAIN_TYPE_MULTILAYER": 3,
	}
)

func (x DomainType) Enum() *DomainType {
	p := new(DomainType)
	*p = x
	return p
}

func (x DomainType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DomainType) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[9].Descriptor()
}

func (DomainType) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[9]
}

func (x DomainType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DomainType.Descriptor instead.
func (DomainType) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{9}
}

type UnitIDType int32

const (
	UnitIDType_UNIT_ID_TYPE_UNKNOWN UnitIDType = 0
	UnitIDType_UNIT_ID_TYPE_DEFAULT UnitIDType = 1
	UnitIDType_UNIT_ID_TYPE_NEW_ID  UnitIDType = 2
)

// Enum value maps for UnitIDType.
var (
	UnitIDType_name = map[int32]string{
		0: "UNIT_ID_TYPE_UNKNOWN",
		1: "UNIT_ID_TYPE_DEFAULT",
		2: "UNIT_ID_TYPE_NEW_ID",
	}
	UnitIDType_value = map[string]int32{
		"UNIT_ID_TYPE_UNKNOWN": 0,
		"UNIT_ID_TYPE_DEFAULT": 1,
		"UNIT_ID_TYPE_NEW_ID":  2,
	}
)

func (x UnitIDType) Enum() *UnitIDType {
	p := new(UnitIDType)
	*p = x
	return p
}

func (x UnitIDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitIDType) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[10].Descriptor()
}

func (UnitIDType) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[10]
}

func (x UnitIDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitIDType.Descriptor instead.
func (UnitIDType) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{10}
}

type LayerType int32

const (
	LayerType_LAYER_ORIGIN_UNKNOWN LayerType = 0
	LayerType_LAYER_ORIGIN_EXP     LayerType = 1
	LayerType_LAYER_ORIGIN_CONFIG  LayerType = 2
	LayerType_LAYER_ORIGIN_HOLDOUT LayerType = 3
)

// Enum value maps for LayerType.
var (
	LayerType_name = map[int32]string{
		0: "LAYER_ORIGIN_UNKNOWN",
		1: "LAYER_ORIGIN_EXP",
		2: "LAYER_ORIGIN_CONFIG",
		3: "LAYER_ORIGIN_HOLDOUT",
	}
	LayerType_value = map[string]int32{
		"LAYER_ORIGIN_UNKNOWN": 0,
		"LAYER_ORIGIN_EXP":     1,
		"LAYER_ORIGIN_CONFIG":  2,
		"LAYER_ORIGIN_HOLDOUT": 3,
	}
)

func (x LayerType) Enum() *LayerType {
	p := new(LayerType)
	*p = x
	return p
}

func (x LayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[11].Descriptor()
}

func (LayerType) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[11]
}

func (x LayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LayerType.Descriptor instead.
func (LayerType) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{11}
}

type RemoteConfigValueType int32

const (
	RemoteConfigValueType_REMOTE_CONFIG_VALUE_TYPE_UNKNOWN RemoteConfigValueType = 0
	RemoteConfigValueType_REMOTE_CONFIG_VALUE_TYPE_BOOL    RemoteConfigValueType = 1
	RemoteConfigValueType_REMOTE_CONFIG_VALUE_TYPE_BYTES   RemoteConfigValueType = 2
	RemoteConfigValueType_REMOTE_CONFIG_VALUE_TYPE_URL     RemoteConfigValueType = 3
)

// Enum value maps for RemoteConfigValueType.
var (
	RemoteConfigValueType_name = map[int32]string{
		0: "REMOTE_CONFIG_VALUE_TYPE_UNKNOWN",
		1: "REMOTE_CONFIG_VALUE_TYPE_BOOL",
		2: "REMOTE_CONFIG_VALUE_TYPE_BYTES",
		3: "REMOTE_CONFIG_VALUE_TYPE_URL",
	}
	RemoteConfigValueType_value = map[string]int32{
		"REMOTE_CONFIG_VALUE_TYPE_UNKNOWN": 0,
		"REMOTE_CONFIG_VALUE_TYPE_BOOL":    1,
		"REMOTE_CONFIG_VALUE_TYPE_BYTES":   2,
		"REMOTE_CONFIG_VALUE_TYPE_URL":     3,
	}
)

func (x RemoteConfigValueType) Enum() *RemoteConfigValueType {
	p := new(RemoteConfigValueType)
	*p = x
	return p
}

func (x RemoteConfigValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoteConfigValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[12].Descriptor()
}

func (RemoteConfigValueType) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[12]
}

func (x RemoteConfigValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoteConfigValueType.Descriptor instead.
func (RemoteConfigValueType) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{12}
}

// bitmap or range
type BucketType int32

const (
	BucketType_BUCKET_TYPE_UNKNOWN BucketType = 0
	BucketType_BUCKET_TYPE_BITMAP  BucketType = 1 // bitmap
	BucketType_BUCKET_TYPE_RANGE   BucketType = 2
)

// Enum value maps for BucketType.
var (
	BucketType_name = map[int32]string{
		0: "BUCKET_TYPE_UNKNOWN",
		1: "BUCKET_TYPE_BITMAP",
		2: "BUCKET_TYPE_RANGE",
	}
	BucketType_value = map[string]int32{
		"BUCKET_TYPE_UNKNOWN": 0,
		"BUCKET_TYPE_BITMAP":  1,
		"BUCKET_TYPE_RANGE":   2,
	}
)

func (x BucketType) Enum() *BucketType {
	p := new(BucketType)
	*p = x
	return p
}

func (x BucketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BucketType) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[13].Descriptor()
}

func (BucketType) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[13]
}

func (x BucketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BucketType.Descriptor instead.
func (BucketType) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{13}
}

type ModifyType int32

const (
	ModifyType_MODIFY_UNKNOWN ModifyType = 0
	ModifyType_MODIFY_UPDATE  ModifyType = 1
	ModifyType_MODIFY_DELETE  ModifyType = 2
)

// Enum value maps for ModifyType.
var (
	ModifyType_name = map[int32]string{
		0: "MODIFY_UNKNOWN",
		1: "MODIFY_UPDATE",
		2: "MODIFY_DELETE",
	}
	ModifyType_value = map[string]int32{
		"MODIFY_UNKNOWN": 0,
		"MODIFY_UPDATE":  1,
		"MODIFY_DELETE":  2,
	}
)

func (x ModifyType) Enum() *ModifyType {
	p := new(ModifyType)
	*p = x
	return p
}

func (x ModifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_server_proto_enumTypes[14].Descriptor()
}

func (ModifyType) Type() protoreflect.EnumType {
	return &file_cache_server_proto_enumTypes[14]
}

func (x ModifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModifyType.Descriptor instead.
func (ModifyType) EnumDescriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{14}
}

// Get remote cache service configuration information
type GetTabConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string     `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`                                                 // Business unique identifier
	Version    string     `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                                                                      // Local configuration information version, used for patch delivery. If version is empty, the full version will be pulled.
	UpdateType UpdateType `protobuf:"varint,4,opt,name=update_type,json=updateType,proto3,enum=opensource.tab.cache_server.UpdateType" json:"update_type,omitempty"` // Update method
	SdkVersion string     `protobuf:"bytes,5,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`                                              // SDK version information, for example GO_1.6.0
	Region     string     `protobuf:"bytes,10,opt,name=region,proto3" json:"region,omitempty"`                                                                       // Regional information, different configurations can be issued according to different regions
}

func (x *GetTabConfigReq) Reset() {
	*x = GetTabConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTabConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabConfigReq) ProtoMessage() {}

func (x *GetTabConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabConfigReq.ProtoReflect.Descriptor instead.
func (*GetTabConfigReq) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{0}
}

func (x *GetTabConfigReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetTabConfigReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetTabConfigReq) GetUpdateType() UpdateType {
	if x != nil {
		return x.UpdateType
	}
	return UpdateType_UPDATE_TYPE_UNKNOWN
}

func (x *GetTabConfigReq) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *GetTabConfigReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// Get cached data results
type GetTabConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code             Code              `protobuf:"varint,1,opt,name=code,proto3,enum=opensource.tab.cache_server.Code" json:"code,omitempty"`             // error code
	Message          string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                              // Detailed description
	TabConfigManager *TabConfigManager `protobuf:"bytes,10,opt,name=tab_config_manager,json=tabConfigManager,proto3" json:"tab_config_manager,omitempty"` // Cached data
}

func (x *GetTabConfigResp) Reset() {
	*x = GetTabConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTabConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabConfigResp) ProtoMessage() {}

func (x *GetTabConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabConfigResp.ProtoReflect.Descriptor instead.
func (*GetTabConfigResp) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{1}
}

func (x *GetTabConfigResp) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_CODE_SUCCESS
}

func (x *GetTabConfigResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTabConfigResp) GetTabConfigManager() *TabConfigManager {
	if x != nil {
		return x.TabConfigManager
	}
	return nil
}

// Whitelist - Experiment IDs mapped at each layer
type LayerToGroupID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key=layer_key，value= group ID
	LayerToGroupId map[string]int64 `protobuf:"bytes,1,rep,name=layer_to_group_id,json=layerToGroupId,proto3" json:"layer_to_group_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *LayerToGroupID) Reset() {
	*x = LayerToGroupID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayerToGroupID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerToGroupID) ProtoMessage() {}

func (x *LayerToGroupID) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerToGroupID.ProtoReflect.Descriptor instead.
func (*LayerToGroupID) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{2}
}

func (x *LayerToGroupID) GetLayerToGroupId() map[string]int64 {
	if x != nil {
		return x.LayerToGroupId
	}
	return nil
}

// Experimental layer domain structure // TODO The concept of layer domain structure is revealed, encapsulated, and the threshold is lowered
type Domain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata             *DomainMetadata     `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                          // metadata
	HoldoutDomainList    []*HoldoutDomain    `protobuf:"bytes,10,rep,name=holdout_domain_list,json=holdoutDomainList,proto3" json:"holdout_domain_list,omitempty"`            // Run through domain list // TODO The essence is to let some people go through one level and be done with it.
	MultiLayerDomainList []*MultiLayerDomain `protobuf:"bytes,11,rep,name=multi_layer_domain_list,json=multiLayerDomainList,proto3" json:"multi_layer_domain_list,omitempty"` // Multi-layer domain list
	DomainList           []*Domain           `protobuf:"bytes,12,rep,name=domain_list,json=domainList,proto3" json:"domain_list,omitempty"`                                   // Nested subdomain structure
}

func (x *Domain) Reset() {
	*x = Domain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Domain) ProtoMessage() {}

func (x *Domain) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Domain.ProtoReflect.Descriptor instead.
func (*Domain) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{3}
}

func (x *Domain) GetMetadata() *DomainMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Domain) GetHoldoutDomainList() []*HoldoutDomain {
	if x != nil {
		return x.HoldoutDomainList
	}
	return nil
}

func (x *Domain) GetMultiLayerDomainList() []*MultiLayerDomain {
	if x != nil {
		return x.MultiLayerDomainList
	}
	return nil
}

func (x *Domain) GetDomainList() []*Domain {
	if x != nil {
		return x.DomainList
	}
	return nil
}

// Experimental Layer
type Layer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata        *LayerMetadata        `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	GroupIndex      map[int64]*Group      `protobuf:"bytes,10,rep,name=group_index,json=groupIndex,proto3" json:"group_index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                // Experiment group index under the layer
	ExperimentIndex map[int64]*Experiment `protobuf:"bytes,11,rep,name=experiment_index,json=experimentIndex,proto3" json:"experiment_index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // The index of the experiment list under the layer, the key is the experiment ID, and the value is the experiment
}

func (x *Layer) Reset() {
	*x = Layer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer) ProtoMessage() {}

func (x *Layer) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer.ProtoReflect.Descriptor instead.
func (*Layer) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{4}
}

func (x *Layer) GetMetadata() *LayerMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Layer) GetGroupIndex() map[int64]*Group {
	if x != nil {
		return x.GroupIndex
	}
	return nil
}

func (x *Layer) GetExperimentIndex() map[int64]*Experiment {
	if x != nil {
		return x.ExperimentIndex
	}
	return nil
}

// Experimental information
type Experiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashMethod   HashMethod     `protobuf:"varint,1,opt,name=hash_method,json=hashMethod,proto3,enum=opensource.tab.cache_server.HashMethod" json:"hash_method,omitempty"`                                                       // hash method
	HashSeed     int64          `protobuf:"varint,2,opt,name=hash_seed,json=hashSeed,proto3" json:"hash_seed,omitempty"`                                                                                                         // The seed used for the second hash
	Id           int64          `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                                                                                                                     // experiment ID
	Key          string         `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`                                                                                                                                    // experiment key
	BucketSize   int64          `protobuf:"varint,5,opt,name=bucket_size,json=bucketSize,proto3" json:"bucket_size,omitempty"`                                                                                                   // Number of experimental barrels，100/1000/10000/100000
	IssueType    IssueType      `protobuf:"varint,10,opt,name=issue_type,json=issueType,proto3,enum=opensource.tab.cache_server.IssueType" json:"issue_type,omitempty"`                                                          // Issue Type
	GroupIdIndex map[int64]bool `protobuf:"bytes,11,rep,name=group_id_index,json=groupIdIndex,proto3" json:"group_id_index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // The experimental group index under the experiment, the key is groupID, and the value is always true
}

func (x *Experiment) Reset() {
	*x = Experiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Experiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Experiment) ProtoMessage() {}

func (x *Experiment) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Experiment.ProtoReflect.Descriptor instead.
func (*Experiment) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{5}
}

func (x *Experiment) GetHashMethod() HashMethod {
	if x != nil {
		return x.HashMethod
	}
	return HashMethod_HASH_METHOD_UNKNOWN
}

func (x *Experiment) GetHashSeed() int64 {
	if x != nil {
		return x.HashSeed
	}
	return 0
}

func (x *Experiment) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Experiment) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Experiment) GetBucketSize() int64 {
	if x != nil {
		return x.BucketSize
	}
	return 0
}

func (x *Experiment) GetIssueType() IssueType {
	if x != nil {
		return x.IssueType
	}
	return IssueType_ISSUE_TYPE_UNKNOWN
}

func (x *Experiment) GetGroupIdIndex() map[int64]bool {
	if x != nil {
		return x.GroupIdIndex
	}
	return nil
}

// holdout
type HoldoutDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata  *DomainMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	LayerList []*Layer        `protobuf:"bytes,10,rep,name=layer_list,json=layerList,proto3" json:"layer_list,omitempty"` // holdout Theoretically, there is only one layer under the holdout domain, but the SDK protocol supports multiple
}

func (x *HoldoutDomain) Reset() {
	*x = HoldoutDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldoutDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldoutDomain) ProtoMessage() {}

func (x *HoldoutDomain) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldoutDomain.ProtoReflect.Descriptor instead.
func (*HoldoutDomain) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{6}
}

func (x *HoldoutDomain) GetMetadata() *DomainMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HoldoutDomain) GetLayerList() []*Layer {
	if x != nil {
		return x.LayerList
	}
	return nil
}

// MultiLayerDomain
type MultiLayerDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata  *DomainMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	LayerList []*Layer        `protobuf:"bytes,10,rep,name=layer_list,json=layerList,proto3" json:"layer_list,omitempty"` // layer_list
}

func (x *MultiLayerDomain) Reset() {
	*x = MultiLayerDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLayerDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLayerDomain) ProtoMessage() {}

func (x *MultiLayerDomain) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLayerDomain.ProtoReflect.Descriptor instead.
func (*MultiLayerDomain) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{7}
}

func (x *MultiLayerDomain) GetMetadata() *DomainMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MultiLayerDomain) GetLayerList() []*Layer {
	if x != nil {
		return x.LayerList
	}
	return nil
}

// Experimental group information under the experiment [control group or experimental group]
type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                // Experimental group ID
	GroupKey      string            `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`                                                                     // Experimental group key
	ExperimentId  int64             `protobuf:"varint,3,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`                                                        // experiment ID
	ExperimentKey string            `protobuf:"bytes,4,opt,name=experiment_key,json=experimentKey,proto3" json:"experiment_key,omitempty"`                                                      // experiment key
	Params        map[string]string `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // group param
	IsDefault     bool              `protobuf:"varint,6,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`                                                                 // is_default
	IsControl     bool              `protobuf:"varint,7,opt,name=is_control,json=isControl,proto3" json:"is_control,omitempty"`                                                                 // is_control
	LayerKey      string            `protobuf:"bytes,8,opt,name=layer_key,json=layerKey,proto3" json:"layer_key,omitempty"`                                                                     // Redundant field, storing the layer key
	IssueInfo     *IssueInfo        `protobuf:"bytes,9,opt,name=issue_info,json=issueInfo,proto3" json:"issue_info,omitempty"`                                                                  // Send information
	SceneIdList   []int64           `protobuf:"varint,10,rep,packed,name=scene_id_list,json=sceneIdList,proto3" json:"scene_id_list,omitempty"`                                                 // scene id list
	UnitIdType    UnitIDType        `protobuf:"varint,11,opt,name=unit_id_type,json=unitIdType,proto3,enum=opensource.tab.cache_server.UnitIDType" json:"unit_id_type,omitempty"`               // Redundant fields, account ID system
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{8}
}

func (x *Group) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Group) GetGroupKey() string {
	if x != nil {
		return x.GroupKey
	}
	return ""
}

func (x *Group) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *Group) GetExperimentKey() string {
	if x != nil {
		return x.ExperimentKey
	}
	return ""
}

func (x *Group) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Group) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *Group) GetIsControl() bool {
	if x != nil {
		return x.IsControl
	}
	return false
}

func (x *Group) GetLayerKey() string {
	if x != nil {
		return x.LayerKey
	}
	return ""
}

func (x *Group) GetIssueInfo() *IssueInfo {
	if x != nil {
		return x.IssueInfo
	}
	return nil
}

func (x *Group) GetSceneIdList() []int64 {
	if x != nil {
		return x.SceneIdList
	}
	return nil
}

func (x *Group) GetUnitIdType() UnitIDType {
	if x != nil {
		return x.UnitIdType
	}
	return UnitIDType_UNIT_ID_TYPE_UNKNOWN
}

// Experimental information release
type IssueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueType    IssueType  `protobuf:"varint,1,opt,name=issue_type,json=issueType,proto3,enum=opensource.tab.cache_server.IssueType" json:"issue_type,omitempty"` // issue type
	TagListGroup []*TagList `protobuf:"bytes,2,rep,name=tag_list_group,json=tagListGroup,proto3" json:"tag_list_group,omitempty"`                                  // The or relationship between tagList, and the and relationship expression in tagList (A && B && C ...) || (a && b && c ...) || ...
}

func (x *IssueInfo) Reset() {
	*x = IssueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueInfo) ProtoMessage() {}

func (x *IssueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueInfo.ProtoReflect.Descriptor instead.
func (*IssueInfo) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{9}
}

func (x *IssueInfo) GetIssueType() IssueType {
	if x != nil {
		return x.IssueType
	}
	return IssueType_ISSUE_TYPE_UNKNOWN
}

func (x *IssueInfo) GetTagListGroup() []*TagList {
	if x != nil {
		return x.TagListGroup
	}
	return nil
}

type TagList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagList []*Tag `protobuf:"bytes,2,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"` //
}

func (x *TagList) Reset() {
	*x = TagList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagList) ProtoMessage() {}

func (x *TagList) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagList.ProtoReflect.Descriptor instead.
func (*TagList) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{10}
}

func (x *TagList) GetTagList() []*Tag {
	if x != nil {
		return x.TagList
	}
	return nil
}

// tag
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                                                                // tag key，The key in the label kv passed by the user is used to obtain the user label value and compare it with the current configuration label value
	TagType     TagType    `protobuf:"varint,2,opt,name=tag_type,json=tagType,proto3,enum=opensource.tab.cache_server.TagType" json:"tag_type,omitempty"`               // 字string\value\array\bool etc.
	Operator    Operator   `protobuf:"varint,3,opt,name=operator,proto3,enum=opensource.tab.cache_server.Operator" json:"operator,omitempty"`                           // operator lte\gte etc
	Value       string     `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`                                                                            // Tag value, crowd package type identifier crowd package key
	DmpPlatform int64      `protobuf:"varint,5,opt,name=dmp_platform,json=dmpPlatform,proto3" json:"dmp_platform,omitempty"`                                            // Crowd pack determination system TODO enum
	UnitIdType  UnitIDType `protobuf:"varint,6,opt,name=unit_id_type,json=unitIdType,proto3,enum=opensource.tab.cache_server.UnitIDType" json:"unit_id_type,omitempty"` // unit id type
	TagOrigin   TagOrigin  `protobuf:"varint,7,opt,name=tag_origin,json=tagOrigin,proto3,enum=opensource.tab.cache_server.TagOrigin" json:"tag_origin,omitempty"`       // 标签来源
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{11}
}

func (x *Tag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tag) GetTagType() TagType {
	if x != nil {
		return x.TagType
	}
	return TagType_TAG_TYPE_UNKNOWN
}

func (x *Tag) GetOperator() Operator {
	if x != nil {
		return x.Operator
	}
	return Operator_OPERATOR_UNKNOWN
}

func (x *Tag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Tag) GetDmpPlatform() int64 {
	if x != nil {
		return x.DmpPlatform
	}
	return 0
}

func (x *Tag) GetUnitIdType() UnitIDType {
	if x != nil {
		return x.UnitIdType
	}
	return UnitIDType_UNIT_ID_TYPE_UNKNOWN
}

func (x *Tag) GetTagOrigin() TagOrigin {
	if x != nil {
		return x.TagOrigin
	}
	return TagOrigin_TAG_ORIGIN_UNKNOWN
}

type DomainMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        string     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // key
	DomainType DomainType `protobuf:"varint,2,opt,name=domain_type,json=domainType,proto3,enum=opensource.tab.cache_server.DomainType" json:"domain_type,omitempty"`
	HashMethod HashMethod `protobuf:"varint,3,opt,name=hash_method,json=hashMethod,proto3,enum=opensource.tab.cache_server.HashMethod" json:"hash_method,omitempty"` // hash
	HashSeed   int64      `protobuf:"varint,4,opt,name=hash_seed,json=hashSeed,proto3" json:"hash_seed,omitempty"`                                                   // hash
	// UnitIDType decisionID Special for diversion + reportID N decisionID -> 1 unitID TODO
	UnitIdType       UnitIDType      `protobuf:"varint,5,opt,name=unit_id_type,json=unitIdType,proto3,enum=opensource.tab.cache_server.UnitIDType" json:"unit_id_type,omitempty"` // The ID type used for diversion, used for grayscale switching of diversion ID (usually account system) TODO
	BucketSize       int64           `protobuf:"varint,6,opt,name=bucket_size,json=bucketSize,proto3" json:"bucket_size,omitempty"`                                               // Number of layer buckets, 100/1000/10000/100000, traffic segmentation granularity of the domain
	TrafficRangeList []*TrafficRange `protobuf:"bytes,10,rep,name=traffic_range_list,json=trafficRangeList,proto3" json:"traffic_range_list,omitempty"`                           // traffic range
}

func (x *DomainMetadata) Reset() {
	*x = DomainMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainMetadata) ProtoMessage() {}

func (x *DomainMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainMetadata.ProtoReflect.Descriptor instead.
func (*DomainMetadata) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{12}
}

func (x *DomainMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DomainMetadata) GetDomainType() DomainType {
	if x != nil {
		return x.DomainType
	}
	return DomainType_DOMAIN_TYPE_UNKNOWN
}

func (x *DomainMetadata) GetHashMethod() HashMethod {
	if x != nil {
		return x.HashMethod
	}
	return HashMethod_HASH_METHOD_UNKNOWN
}

func (x *DomainMetadata) GetHashSeed() int64 {
	if x != nil {
		return x.HashSeed
	}
	return 0
}

func (x *DomainMetadata) GetUnitIdType() UnitIDType {
	if x != nil {
		return x.UnitIdType
	}
	return UnitIDType_UNIT_ID_TYPE_UNKNOWN
}

func (x *DomainMetadata) GetBucketSize() int64 {
	if x != nil {
		return x.BucketSize
	}
	return 0
}

func (x *DomainMetadata) GetTrafficRangeList() []*TrafficRange {
	if x != nil {
		return x.TrafficRangeList
	}
	return nil
}

type LayerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              string          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DefaultGroup     *Group          `protobuf:"bytes,2,opt,name=default_group,json=defaultGroup,proto3" json:"default_group,omitempty"`
	HashType         HashType        `protobuf:"varint,3,opt,name=hash_type,json=hashType,proto3,enum=opensource.tab.cache_server.HashType" json:"hash_type,omitempty"`         // hash type
	HashMethod       HashMethod      `protobuf:"varint,4,opt,name=hash_method,json=hashMethod,proto3,enum=opensource.tab.cache_server.HashMethod" json:"hash_method,omitempty"` // hash
	HashSeed         int64           `protobuf:"varint,5,opt,name=hash_seed,json=hashSeed,proto3" json:"hash_seed,omitempty"`                                                   // hash seed
	SceneIdList      []int64         `protobuf:"varint,6,rep,packed,name=scene_id_list,json=sceneIdList,proto3" json:"scene_id_list,omitempty"`
	UnitIdType       UnitIDType      `protobuf:"varint,7,opt,name=unit_id_type,json=unitIdType,proto3,enum=opensource.tab.cache_server.UnitIDType" json:"unit_id_type,omitempty"`
	TrafficRangeList []*TrafficRange `protobuf:"bytes,8,rep,name=traffic_range_list,json=trafficRangeList,proto3" json:"traffic_range_list,omitempty"`                       // TODO No, traffic is controlled by the domain
	BucketSize       int64           `protobuf:"varint,10,opt,name=bucket_size,json=bucketSize,proto3" json:"bucket_size,omitempty"`                                         // bucket size，100/1000/10000/100000
	HoldoutLayerKeys []string        `protobuf:"bytes,11,rep,name=holdout_layer_keys,json=holdoutLayerKeys,proto3" json:"holdout_layer_keys,omitempty"`                      // Mounted holdout layers, judging from left to right, web guarantees that there will be no loops Layer A holdout layer B, .., layer B holdout layer A
	LayerType        LayerType       `protobuf:"varint,12,opt,name=layer_type,json=layerType,proto3,enum=opensource.tab.cache_server.LayerType" json:"layer_type,omitempty"` // layer type
}

func (x *LayerMetadata) Reset() {
	*x = LayerMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerMetadata) ProtoMessage() {}

func (x *LayerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerMetadata.ProtoReflect.Descriptor instead.
func (*LayerMetadata) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{13}
}

func (x *LayerMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LayerMetadata) GetDefaultGroup() *Group {
	if x != nil {
		return x.DefaultGroup
	}
	return nil
}

func (x *LayerMetadata) GetHashType() HashType {
	if x != nil {
		return x.HashType
	}
	return HashType_HASH_TYPE_UNKNOWN
}

func (x *LayerMetadata) GetHashMethod() HashMethod {
	if x != nil {
		return x.HashMethod
	}
	return HashMethod_HASH_METHOD_UNKNOWN
}

func (x *LayerMetadata) GetHashSeed() int64 {
	if x != nil {
		return x.HashSeed
	}
	return 0
}

func (x *LayerMetadata) GetSceneIdList() []int64 {
	if x != nil {
		return x.SceneIdList
	}
	return nil
}

func (x *LayerMetadata) GetUnitIdType() UnitIDType {
	if x != nil {
		return x.UnitIdType
	}
	return UnitIDType_UNIT_ID_TYPE_UNKNOWN
}

func (x *LayerMetadata) GetTrafficRangeList() []*TrafficRange {
	if x != nil {
		return x.TrafficRangeList
	}
	return nil
}

func (x *LayerMetadata) GetBucketSize() int64 {
	if x != nil {
		return x.BucketSize
	}
	return 0
}

func (x *LayerMetadata) GetHoldoutLayerKeys() []string {
	if x != nil {
		return x.HoldoutLayerKeys
	}
	return nil
}

func (x *LayerMetadata) GetLayerType() LayerType {
	if x != nil {
		return x.LayerType
	}
	return LayerType_LAYER_ORIGIN_UNKNOWN
}

// Traffic interval range hashValue is in the interval (0, bucket_size], and hitting the closed interval [left,right] is considered a hit
type TrafficRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left  int64 `protobuf:"varint,1,opt,name=left,proto3" json:"left,omitempty"`
	Right int64 `protobuf:"varint,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *TrafficRange) Reset() {
	*x = TrafficRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficRange) ProtoMessage() {}

func (x *TrafficRange) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficRange.ProtoReflect.Descriptor instead.
func (*TrafficRange) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{14}
}

func (x *TrafficRange) GetLeft() int64 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *TrafficRange) GetRight() int64 {
	if x != nil {
		return x.Right
	}
	return 0
}

type ExperimentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultGroupId int64                      `protobuf:"varint,1,opt,name=default_group_id,json=defaultGroupId,proto3" json:"default_group_id,omitempty"`
	OverrideList   map[string]*LayerToGroupID `protobuf:"bytes,2,rep,name=override_list,json=overrideList,proto3" json:"override_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GlobalDomain   *Domain                    `protobuf:"bytes,3,opt,name=global_domain,json=globalDomain,proto3" json:"global_domain,omitempty"`
	HoldoutData    *HoldoutData               `protobuf:"bytes,4,opt,name=holdout_data,json=holdoutData,proto3" json:"holdout_data,omitempty"`
}

func (x *ExperimentData) Reset() {
	*x = ExperimentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentData) ProtoMessage() {}

func (x *ExperimentData) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentData.ProtoReflect.Descriptor instead.
func (*ExperimentData) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{15}
}

func (x *ExperimentData) GetDefaultGroupId() int64 {
	if x != nil {
		return x.DefaultGroupId
	}
	return 0
}

func (x *ExperimentData) GetOverrideList() map[string]*LayerToGroupID {
	if x != nil {
		return x.OverrideList
	}
	return nil
}

func (x *ExperimentData) GetGlobalDomain() *Domain {
	if x != nil {
		return x.GlobalDomain
	}
	return nil
}

func (x *ExperimentData) GetHoldoutData() *HoldoutData {
	if x != nil {
		return x.HoldoutData
	}
	return nil
}

type HoldoutData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldoutLayerIndex map[string]*Layer `protobuf:"bytes,1,rep,name=holdout_layer_index,json=holdoutLayerIndex,proto3" json:"holdout_layer_index,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HoldoutData) Reset() {
	*x = HoldoutData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldoutData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldoutData) ProtoMessage() {}

func (x *HoldoutData) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldoutData.ProtoReflect.Descriptor instead.
func (*HoldoutData) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{16}
}

func (x *HoldoutData) GetHoldoutLayerIndex() map[string]*Layer {
	if x != nil {
		return x.HoldoutLayerIndex
	}
	return nil
}

type RemoteConfigData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteConfigIndex map[string]*RemoteConfig `protobuf:"bytes,1,rep,name=remote_config_index,json=remoteConfigIndex,proto3" json:"remote_config_index,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RemoteConfigData) Reset() {
	*x = RemoteConfigData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigData) ProtoMessage() {}

func (x *RemoteConfigData) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigData.ProtoReflect.Descriptor instead.
func (*RemoteConfigData) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{17}
}

func (x *RemoteConfigData) GetRemoteConfigIndex() map[string]*RemoteConfig {
	if x != nil {
		return x.RemoteConfigIndex
	}
	return nil
}

type RemoteConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              string                `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DefaultValue     []byte                `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	Version          string                `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	SceneIdList      []int64               `protobuf:"varint,4,rep,packed,name=scene_id_list,json=sceneIdList,proto3" json:"scene_id_list,omitempty"`
	Type             RemoteConfigValueType `protobuf:"varint,5,opt,name=type,proto3,enum=opensource.tab.cache_server.RemoteConfigValueType" json:"type,omitempty"`
	ConditionList    []*Condition          `protobuf:"bytes,6,rep,name=condition_list,json=conditionList,proto3" json:"condition_list,omitempty"`
	OverrideList     map[string][]byte     `protobuf:"bytes,10,rep,name=override_list,json=overrideList,proto3" json:"override_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HoldoutLayerKeys []string              `protobuf:"bytes,11,rep,name=holdout_layer_keys,json=holdoutLayerKeys,proto3" json:"holdout_layer_keys,omitempty"`
}

func (x *RemoteConfig) Reset() {
	*x = RemoteConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfig) ProtoMessage() {}

func (x *RemoteConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfig.ProtoReflect.Descriptor instead.
func (*RemoteConfig) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{18}
}

func (x *RemoteConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RemoteConfig) GetDefaultValue() []byte {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *RemoteConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RemoteConfig) GetSceneIdList() []int64 {
	if x != nil {
		return x.SceneIdList
	}
	return nil
}

func (x *RemoteConfig) GetType() RemoteConfigValueType {
	if x != nil {
		return x.Type
	}
	return RemoteConfigValueType_REMOTE_CONFIG_VALUE_TYPE_UNKNOWN
}

func (x *RemoteConfig) GetConditionList() []*Condition {
	if x != nil {
		return x.ConditionList
	}
	return nil
}

func (x *RemoteConfig) GetOverrideList() map[string][]byte {
	if x != nil {
		return x.OverrideList
	}
	return nil
}

func (x *RemoteConfig) GetHoldoutLayerKeys() []string {
	if x != nil {
		return x.HoldoutLayerKeys
	}
	return nil
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Key           string      `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	HashMethod    HashMethod  `protobuf:"varint,4,opt,name=hash_method,json=hashMethod,proto3,enum=opensource.tab.cache_server.HashMethod" json:"hash_method,omitempty"`
	HashSeed      int64       `protobuf:"varint,5,opt,name=hash_seed,json=hashSeed,proto3" json:"hash_seed,omitempty"`
	ExperimentKey string      `protobuf:"bytes,6,opt,name=experiment_key,json=experimentKey,proto3" json:"experiment_key,omitempty"`
	BucketSize    int64       `protobuf:"varint,7,opt,name=bucket_size,json=bucketSize,proto3" json:"bucket_size,omitempty"`
	BucketInfo    *BucketInfo `protobuf:"bytes,8,opt,name=bucket_info,json=bucketInfo,proto3" json:"bucket_info,omitempty"`
	UnitIdType    UnitIDType  `protobuf:"varint,9,opt,name=unit_id_type,json=unitIdType,proto3,enum=opensource.tab.cache_server.UnitIDType" json:"unit_id_type,omitempty"`
	IssueInfo     *IssueInfo  `protobuf:"bytes,10,opt,name=issue_info,json=issueInfo,proto3" json:"issue_info,omitempty"`
	ConfigKey     string      `protobuf:"bytes,11,opt,name=config_key,json=configKey,proto3" json:"config_key,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{19}
}

func (x *Condition) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Condition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Condition) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Condition) GetHashMethod() HashMethod {
	if x != nil {
		return x.HashMethod
	}
	return HashMethod_HASH_METHOD_UNKNOWN
}

func (x *Condition) GetHashSeed() int64 {
	if x != nil {
		return x.HashSeed
	}
	return 0
}

func (x *Condition) GetExperimentKey() string {
	if x != nil {
		return x.ExperimentKey
	}
	return ""
}

func (x *Condition) GetBucketSize() int64 {
	if x != nil {
		return x.BucketSize
	}
	return 0
}

func (x *Condition) GetBucketInfo() *BucketInfo {
	if x != nil {
		return x.BucketInfo
	}
	return nil
}

func (x *Condition) GetUnitIdType() UnitIDType {
	if x != nil {
		return x.UnitIdType
	}
	return UnitIDType_UNIT_ID_TYPE_UNKNOWN
}

func (x *Condition) GetIssueInfo() *IssueInfo {
	if x != nil {
		return x.IssueInfo
	}
	return nil
}

func (x *Condition) GetConfigKey() string {
	if x != nil {
		return x.ConfigKey
	}
	return ""
}

type ControlData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshInterval                  uint32                        `protobuf:"varint,1,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
	IgnoreReportGroupId              map[int64]bool                `protobuf:"bytes,2,rep,name=ignore_report_group_id,json=ignoreReportGroupId,proto3" json:"ignore_report_group_id,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ExperimentMetricsConfig          map[int64]*MetricsConfig      `protobuf:"bytes,3,rep,name=experiment_metrics_config,json=experimentMetricsConfig,proto3" json:"experiment_metrics_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DefaultExperimentMetricsConfig   *MetricsConfig                `protobuf:"bytes,4,opt,name=default_experiment_metrics_config,json=defaultExperimentMetricsConfig,proto3" json:"default_experiment_metrics_config,omitempty"`
	RemoteConfigMetricsConfig        map[int64]*MetricsConfig      `protobuf:"bytes,5,rep,name=remote_config_metrics_config,json=remoteConfigMetricsConfig,proto3" json:"remote_config_metrics_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DefaultRemoteConfigMetricsConfig *MetricsConfig                `protobuf:"bytes,6,opt,name=default_remote_config_metrics_config,json=defaultRemoteConfigMetricsConfig,proto3" json:"default_remote_config_metrics_config,omitempty"`
	FeatureFlagMetricsConfig         map[int64]*MetricsConfig      `protobuf:"bytes,7,rep,name=feature_flag_metrics_config,json=featureFlagMetricsConfig,proto3" json:"feature_flag_metrics_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DefaultFeatureFlagMetricsConfig  *MetricsConfig                `protobuf:"bytes,8,opt,name=default_feature_flag_metrics_config,json=defaultFeatureFlagMetricsConfig,proto3" json:"default_feature_flag_metrics_config,omitempty"`
	EventMetricsConfig               *MetricsConfig                `protobuf:"bytes,9,opt,name=event_metrics_config,json=eventMetricsConfig,proto3" json:"event_metrics_config,omitempty"`
	MetricsInitConfigIndex           map[string]*MetricsInitConfig `protobuf:"bytes,10,rep,name=metrics_init_config_index,json=metricsInitConfigIndex,proto3" json:"metrics_init_config_index,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ControlData) Reset() {
	*x = ControlData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlData) ProtoMessage() {}

func (x *ControlData) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlData.ProtoReflect.Descriptor instead.
func (*ControlData) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{20}
}

func (x *ControlData) GetRefreshInterval() uint32 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *ControlData) GetIgnoreReportGroupId() map[int64]bool {
	if x != nil {
		return x.IgnoreReportGroupId
	}
	return nil
}

func (x *ControlData) GetExperimentMetricsConfig() map[int64]*MetricsConfig {
	if x != nil {
		return x.ExperimentMetricsConfig
	}
	return nil
}

func (x *ControlData) GetDefaultExperimentMetricsConfig() *MetricsConfig {
	if x != nil {
		return x.DefaultExperimentMetricsConfig
	}
	return nil
}

func (x *ControlData) GetRemoteConfigMetricsConfig() map[int64]*MetricsConfig {
	if x != nil {
		return x.RemoteConfigMetricsConfig
	}
	return nil
}

func (x *ControlData) GetDefaultRemoteConfigMetricsConfig() *MetricsConfig {
	if x != nil {
		return x.DefaultRemoteConfigMetricsConfig
	}
	return nil
}

func (x *ControlData) GetFeatureFlagMetricsConfig() map[int64]*MetricsConfig {
	if x != nil {
		return x.FeatureFlagMetricsConfig
	}
	return nil
}

func (x *ControlData) GetDefaultFeatureFlagMetricsConfig() *MetricsConfig {
	if x != nil {
		return x.DefaultFeatureFlagMetricsConfig
	}
	return nil
}

func (x *ControlData) GetEventMetricsConfig() *MetricsConfig {
	if x != nil {
		return x.EventMetricsConfig
	}
	return nil
}

func (x *ControlData) GetMetricsInitConfigIndex() map[string]*MetricsInitConfig {
	if x != nil {
		return x.MetricsInitConfigIndex
	}
	return nil
}

type MetricsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAutomatic         bool             `protobuf:"varint,1,opt,name=is_automatic,json=isAutomatic,proto3" json:"is_automatic,omitempty"`
	IsEnable            bool             `protobuf:"varint,2,opt,name=is_enable,json=isEnable,proto3" json:"is_enable,omitempty"`
	PluginName          string           `protobuf:"bytes,3,opt,name=plugin_name,json=pluginName,proto3" json:"plugin_name,omitempty"`
	SceneId             int64            `protobuf:"varint,4,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	SamplingInterval    uint32           `protobuf:"varint,5,opt,name=sampling_interval,json=samplingInterval,proto3" json:"sampling_interval,omitempty"`
	ErrSamplingInterval uint32           `protobuf:"varint,6,opt,name=err_sampling_interval,json=errSamplingInterval,proto3" json:"err_sampling_interval,omitempty"`
	Metadata            *MetricsMetadata `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MetricsConfig) Reset() {
	*x = MetricsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsConfig) ProtoMessage() {}

func (x *MetricsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsConfig.ProtoReflect.Descriptor instead.
func (*MetricsConfig) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{21}
}

func (x *MetricsConfig) GetIsAutomatic() bool {
	if x != nil {
		return x.IsAutomatic
	}
	return false
}

func (x *MetricsConfig) GetIsEnable() bool {
	if x != nil {
		return x.IsEnable
	}
	return false
}

func (x *MetricsConfig) GetPluginName() string {
	if x != nil {
		return x.PluginName
	}
	return ""
}

func (x *MetricsConfig) GetSceneId() int64 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *MetricsConfig) GetSamplingInterval() uint32 {
	if x != nil {
		return x.SamplingInterval
	}
	return 0
}

func (x *MetricsConfig) GetErrSamplingInterval() uint32 {
	if x != nil {
		return x.ErrSamplingInterval
	}
	return 0
}

func (x *MetricsConfig) GetMetadata() *MetricsMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type MetricsInitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region string            `protobuf:"bytes,1,opt,name=Region,proto3" json:"Region,omitempty"`
	Addr   string            `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Kv     map[string]string `protobuf:"bytes,3,rep,name=kv,proto3" json:"kv,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetricsInitConfig) Reset() {
	*x = MetricsInitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsInitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsInitConfig) ProtoMessage() {}

func (x *MetricsInitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsInitConfig.ProtoReflect.Descriptor instead.
func (*MetricsInitConfig) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{22}
}

func (x *MetricsInitConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MetricsInitConfig) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *MetricsInitConfig) GetKv() map[string]string {
	if x != nil {
		return x.Kv
	}
	return nil
}

type MetricsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpandedData map[string]string `protobuf:"bytes,1,rep,name=expanded_data,json=expandedData,proto3" json:"expanded_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name         string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Id           string            `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Token        string            `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *MetricsMetadata) Reset() {
	*x = MetricsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsMetadata) ProtoMessage() {}

func (x *MetricsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsMetadata.ProtoReflect.Descriptor instead.
func (*MetricsMetadata) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{23}
}

func (x *MetricsMetadata) GetExpandedData() map[string]string {
	if x != nil {
		return x.ExpandedData
	}
	return nil
}

func (x *MetricsMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricsMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MetricsMetadata) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type TabConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentData *ExperimentData   `protobuf:"bytes,1,opt,name=experiment_data,json=experimentData,proto3" json:"experiment_data,omitempty"`
	ConfigData     *RemoteConfigData `protobuf:"bytes,2,opt,name=config_data,json=configData,proto3" json:"config_data,omitempty"`
	ControlData    *ControlData      `protobuf:"bytes,3,opt,name=control_data,json=controlData,proto3" json:"control_data,omitempty"`
}

func (x *TabConfig) Reset() {
	*x = TabConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabConfig) ProtoMessage() {}

func (x *TabConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabConfig.ProtoReflect.Descriptor instead.
func (*TabConfig) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{24}
}

func (x *TabConfig) GetExperimentData() *ExperimentData {
	if x != nil {
		return x.ExperimentData
	}
	return nil
}

func (x *TabConfig) GetConfigData() *RemoteConfigData {
	if x != nil {
		return x.ConfigData
	}
	return nil
}

func (x *TabConfig) GetControlData() *ControlData {
	if x != nil {
		return x.ControlData
	}
	return nil
}

type TabConfigManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Version   string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// OriginType origin_type = 3;
	UpdateType     UpdateType `protobuf:"varint,4,opt,name=update_type,json=updateType,proto3,enum=opensource.tab.cache_server.UpdateType" json:"update_type,omitempty"`
	TabConfig      *TabConfig `protobuf:"bytes,10,opt,name=tab_config,json=tabConfig,proto3" json:"tab_config,omitempty"`
	TabConfigPatch []byte     `protobuf:"bytes,11,opt,name=tab_config_patch,json=tabConfigPatch,proto3" json:"tab_config_patch,omitempty"`
}

func (x *TabConfigManager) Reset() {
	*x = TabConfigManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabConfigManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabConfigManager) ProtoMessage() {}

func (x *TabConfigManager) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabConfigManager.ProtoReflect.Descriptor instead.
func (*TabConfigManager) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{25}
}

func (x *TabConfigManager) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TabConfigManager) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TabConfigManager) GetUpdateType() UpdateType {
	if x != nil {
		return x.UpdateType
	}
	return UpdateType_UPDATE_TYPE_UNKNOWN
}

func (x *TabConfigManager) GetTabConfig() *TabConfig {
	if x != nil {
		return x.TabConfig
	}
	return nil
}

func (x *TabConfigManager) GetTabConfigPatch() []byte {
	if x != nil {
		return x.TabConfigPatch
	}
	return nil
}

type BucketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketType   BucketType    `protobuf:"varint,1,opt,name=bucket_type,json=bucketType,proto3,enum=opensource.tab.cache_server.BucketType" json:"bucket_type,omitempty"`
	TrafficRange *TrafficRange `protobuf:"bytes,2,opt,name=traffic_range,json=trafficRange,proto3" json:"traffic_range,omitempty"`
	Bitmap       []byte        `protobuf:"bytes,3,opt,name=bitmap,proto3" json:"bitmap,omitempty"`
	Version      string        `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	ModifyType   ModifyType    `protobuf:"varint,5,opt,name=modify_type,json=modifyType,proto3,enum=opensource.tab.cache_server.ModifyType" json:"modify_type,omitempty"`
}

func (x *BucketInfo) Reset() {
	*x = BucketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketInfo) ProtoMessage() {}

func (x *BucketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketInfo.ProtoReflect.Descriptor instead.
func (*BucketInfo) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{26}
}

func (x *BucketInfo) GetBucketType() BucketType {
	if x != nil {
		return x.BucketType
	}
	return BucketType_BUCKET_TYPE_UNKNOWN
}

func (x *BucketInfo) GetTrafficRange() *TrafficRange {
	if x != nil {
		return x.TrafficRange
	}
	return nil
}

func (x *BucketInfo) GetBitmap() []byte {
	if x != nil {
		return x.Bitmap
	}
	return nil
}

func (x *BucketInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BucketInfo) GetModifyType() ModifyType {
	if x != nil {
		return x.ModifyType
	}
	return ModifyType_MODIFY_UNKNOWN
}

type BatchGetExperimentBucketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          string           `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SdkVersion         string           `protobuf:"bytes,2,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	BucketVersionIndex map[int64]string `protobuf:"bytes,3,rep,name=bucket_version_index,json=bucketVersionIndex,proto3" json:"bucket_version_index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchGetExperimentBucketReq) Reset() {
	*x = BatchGetExperimentBucketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetExperimentBucketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetExperimentBucketReq) ProtoMessage() {}

func (x *BatchGetExperimentBucketReq) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetExperimentBucketReq.ProtoReflect.Descriptor instead.
func (*BatchGetExperimentBucketReq) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{27}
}

func (x *BatchGetExperimentBucketReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BatchGetExperimentBucketReq) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *BatchGetExperimentBucketReq) GetBucketVersionIndex() map[int64]string {
	if x != nil {
		return x.BucketVersionIndex
	}
	return nil
}

// Get experimental bucket information in batches
type BatchGetExperimentBucketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        Code                  `protobuf:"varint,1,opt,name=code,proto3,enum=opensource.tab.cache_server.Code" json:"code,omitempty"`                                                                 // error code
	Message     string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                                                                  // Detailed description
	BucketIndex map[int64]*BucketInfo `protobuf:"bytes,3,rep,name=bucketIndex,proto3" json:"bucketIndex,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Experiment bucket index, key is the experiment ID, only returns the experiment bucket information with changed version number
}

func (x *BatchGetExperimentBucketResp) Reset() {
	*x = BatchGetExperimentBucketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetExperimentBucketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetExperimentBucketResp) ProtoMessage() {}

func (x *BatchGetExperimentBucketResp) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetExperimentBucketResp.ProtoReflect.Descriptor instead.
func (*BatchGetExperimentBucketResp) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{28}
}

func (x *BatchGetExperimentBucketResp) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_CODE_SUCCESS
}

func (x *BatchGetExperimentBucketResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BatchGetExperimentBucketResp) GetBucketIndex() map[int64]*BucketInfo {
	if x != nil {
		return x.BucketIndex
	}
	return nil
}

// Get experimental group bucket information in batches
type BatchGetGroupBucketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          string           `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`                                                                                                                       // project id
	SdkVersion         string           `protobuf:"bytes,2,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`                                                                                                                    // sdk version
	BucketVersionIndex map[int64]string `protobuf:"bytes,3,rep,name=bucket_version_index,json=bucketVersionIndex,proto3" json:"bucket_version_index,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Experiment group ID and version index, key is the experiment group ID
}

func (x *BatchGetGroupBucketReq) Reset() {
	*x = BatchGetGroupBucketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetGroupBucketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetGroupBucketReq) ProtoMessage() {}

func (x *BatchGetGroupBucketReq) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetGroupBucketReq.ProtoReflect.Descriptor instead.
func (*BatchGetGroupBucketReq) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{29}
}

func (x *BatchGetGroupBucketReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *BatchGetGroupBucketReq) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *BatchGetGroupBucketReq) GetBucketVersionIndex() map[int64]string {
	if x != nil {
		return x.BucketVersionIndex
	}
	return nil
}

// Get experimental group bucket information in batches
type BatchGetGroupBucketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        Code                  `protobuf:"varint,1,opt,name=code,proto3,enum=opensource.tab.cache_server.Code" json:"code,omitempty"`                                                                 // error code
	Message     string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                                                                  // Detailed description
	BucketIndex map[int64]*BucketInfo `protobuf:"bytes,3,rep,name=bucketIndex,proto3" json:"bucketIndex,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Experiment group bucket index, key is the experiment group ID, only returns the experiment bucket information with changed version number
}

func (x *BatchGetGroupBucketResp) Reset() {
	*x = BatchGetGroupBucketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetGroupBucketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetGroupBucketResp) ProtoMessage() {}

func (x *BatchGetGroupBucketResp) ProtoReflect() protoreflect.Message {
	mi := &file_cache_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetGroupBucketResp.ProtoReflect.Descriptor instead.
func (*BatchGetGroupBucketResp) Descriptor() ([]byte, []int) {
	return file_cache_server_proto_rawDescGZIP(), []int{30}
}

func (x *BatchGetGroupBucketResp) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_CODE_SUCCESS
}

func (x *BatchGetGroupBucketResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BatchGetGroupBucketResp) GetBucketIndex() map[int64]*BucketInfo {
	if x != nil {
		return x.BucketIndex
	}
	return nil
}

var File_cache_server_proto protoreflect.FileDescriptor

var file_cache_server_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xcd, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74,
	0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x6b,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22,
	0xc0, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74,
	0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x52, 0x10, 0x74, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x6a, 0x0a, 0x11, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61,
	0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x2e, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x1a, 0x41, 0x0a, 0x13, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x02, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74,
	0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x13, 0x68, 0x6f, 0x6c, 0x64,
	0x6f, 0x75, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x11, 0x68, 0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62,
	0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xd8, 0x03, 0x0a, 0x05, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x53, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x62, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74,
	0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x61, 0x0a, 0x0f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62,
	0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6b,
	0x0a, 0x14, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x03, 0x0a, 0x0a,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62,
	0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x53, 0x65, 0x65,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x3f, 0x0a, 0x11,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01,
	0x0a, 0x0d, 0x48, 0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74,
	0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x09, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x10,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0a, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x09, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x94, 0x04, 0x0a,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x46, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62,
	0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x0c, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x6e,
	0x69, 0x74, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x9e, 0x01, 0x0a, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x74, 0x61, 0x67, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61,
	0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x74,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x46, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74,
	0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x74, 0x61, 0x67, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe6, 0x02, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6d, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x6d, 0x70, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45,
	0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x67, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x09, 0x74, 0x61, 0x67, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x98, 0x03, 0x0a, 0x0e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62,
	0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74,
	0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xf3, 0x04, 0x0a, 0x0d, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x42, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61,
	0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x48, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x0a, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0c,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x69,
	0x74, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x68,
	0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xa3, 0x03, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x62, 0x0a,
	0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x48, 0x0a, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x0c, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x68,
	0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74,
	0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x48, 0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x68, 0x6f, 0x6c,
	0x64, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x6c, 0x0a, 0x11, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x01, 0x0a, 0x0b, 0x48, 0x6f, 0x6c, 0x64, 0x6f,
	0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6f, 0x0a, 0x13, 0x68, 0x6f, 0x6c, 0x64, 0x6f, 0x75,
	0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x48, 0x6f,
	0x6c, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x68, 0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x68, 0x0a, 0x16, 0x48, 0x6f, 0x6c, 0x64, 0x6f,
	0x75, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xf9, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x74, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x6f, 0x0a, 0x16,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x03,
	0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74,
	0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x0d, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74,
	0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x68, 0x6f, 0x6c, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x68, 0x6f, 0x6c, 0x64, 0x6f, 0x75,
	0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xed, 0x03, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x48, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x0a, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x48, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61,
	0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x49,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x22, 0xc1, 0x0d, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x76, 0x0a, 0x16, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x81,
	0x01, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x75, 0x0a, 0x21, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x1e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x88, 0x01, 0x0a, 0x1c, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61,
	0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x7a, 0x0a, 0x24, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x20,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x85, 0x01, 0x0a, 0x1b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x78, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x1f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x5c, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61,
	0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x7f, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x1a, 0x46, 0x0a, 0x18, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x76, 0x0a, 0x1c, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x78, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x77, 0x0a, 0x1d, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x79, 0x0a, 0x1b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x49,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb6, 0x02, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x72,
	0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x72, 0x72, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x48,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61,
	0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbe, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x46, 0x0a, 0x02, 0x6b, 0x76,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02,
	0x6b, 0x76, 0x1a, 0x35, 0x0a, 0x07, 0x4b, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x01, 0x0a, 0x0f, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x63, 0x0a,
	0x0d, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x3f, 0x0a, 0x11,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfe, 0x01,
	0x0a, 0x09, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x0f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x86,
	0x02, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74,
	0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x09, 0x74, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x61, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x22, 0xa2, 0x02, 0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4e, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa9, 0x02, 0x0a,
	0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a,
	0x14, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x1a, 0x45, 0x0a, 0x17, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x02, 0x0a, 0x1c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6c, 0x0a, 0x0b, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62,
	0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x67, 0x0a, 0x10, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x9e, 0x02, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x14,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x45, 0x0a, 0x17, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xbc, 0x02, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x67, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x67, 0x0a, 0x10, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x2a, 0x55, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x49, 0x47,
	0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x54, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x10, 0x02, 0x2a, 0xaf,
	0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0xe9, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46,
	0x49, 0x43, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xea, 0x07, 0x12, 0x1c, 0x0a, 0x17, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x10, 0xeb, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xec, 0x07, 0x12,
	0x17, 0x0a, 0x12, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0xed, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xd1, 0x0f,
	0x2a, 0xab, 0x01, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x17, 0x0a, 0x13, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x53, 0x48,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x42, 0x4b, 0x44, 0x52, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4d, 0x55,
	0x52, 0x4d, 0x55, 0x52, 0x33, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x41, 0x53, 0x48, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x44, 0x4a, 0x42, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x48, 0x41, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x10,
	0x04, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x41, 0x50, 0x10, 0x06, 0x2a, 0x4d,
	0x0a, 0x08, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x53, 0x48, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x4b, 0x0a,
	0x09, 0x54, 0x61, 0x67, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41,
	0x47, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x47, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e,
	0x5f, 0x54, 0x41, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x47, 0x5f, 0x4f, 0x52,
	0x49, 0x47, 0x49, 0x4e, 0x5f, 0x44, 0x4d, 0x50, 0x10, 0x02, 0x2a, 0xcd, 0x03, 0x0a, 0x08, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x54, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x54,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47,
	0x54, 0x45, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10,
	0x09, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x55,
	0x50, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x0b, 0x12,
	0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x52, 0x55, 0x45,
	0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x46,
	0x41, 0x4c, 0x53, 0x45, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x52, 0x4f, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x52, 0x43, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x43, 0x52, 0x4f, 0x10, 0x10, 0x12,
	0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x43, 0x52, 0x43,
	0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x13, 0x12, 0x1a,
	0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x14, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x15, 0x2a, 0xad, 0x01, 0x0a, 0x07, 0x54,
	0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x41, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4d, 0x50, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x07, 0x2a, 0x6b, 0x0a, 0x09, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x53,
	0x53, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x03, 0x2a, 0x72, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x59, 0x0a, 0x0a, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45,
	0x57, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x2a, 0x6e, 0x0a, 0x09, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x49,
	0x47, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x45, 0x58,
	0x50, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x49,
	0x47, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x48, 0x4f, 0x4c,
	0x44, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x2a, 0xa6, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x03, 0x2a,
	0x54, 0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x02, 0x2a, 0x46, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x44, 0x49, 0x46,
	0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x32, 0x8d, 0x03,
	0x0a, 0x09, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x8f, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x38, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62,
	0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x62, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x2e, 0x5a,
	0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x62, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cache_server_proto_rawDescOnce sync.Once
	file_cache_server_proto_rawDescData = file_cache_server_proto_rawDesc
)

func file_cache_server_proto_rawDescGZIP() []byte {
	file_cache_server_proto_rawDescOnce.Do(func() {
		file_cache_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_cache_server_proto_rawDescData)
	})
	return file_cache_server_proto_rawDescData
}

var file_cache_server_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_cache_server_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_cache_server_proto_goTypes = []interface{}{
	(OriginType)(0),                      // 0: opensource.tab.cache_server.OriginType
	(UpdateType)(0),                      // 1: opensource.tab.cache_server.UpdateType
	(Code)(0),                            // 2: opensource.tab.cache_server.Code
	(HashMethod)(0),                      // 3: opensource.tab.cache_server.HashMethod
	(HashType)(0),                        // 4: opensource.tab.cache_server.HashType
	(TagOrigin)(0),                       // 5: opensource.tab.cache_server.TagOrigin
	(Operator)(0),                        // 6: opensource.tab.cache_server.Operator
	(TagType)(0),                         // 7: opensource.tab.cache_server.TagType
	(IssueType)(0),                       // 8: opensource.tab.cache_server.IssueType
	(DomainType)(0),                      // 9: opensource.tab.cache_server.DomainType
	(UnitIDType)(0),                      // 10: opensource.tab.cache_server.UnitIDType
	(LayerType)(0),                       // 11: opensource.tab.cache_server.LayerType
	(RemoteConfigValueType)(0),           // 12: opensource.tab.cache_server.RemoteConfigValueType
	(BucketType)(0),                      // 13: opensource.tab.cache_server.BucketType
	(ModifyType)(0),                      // 14: opensource.tab.cache_server.ModifyType
	(*GetTabConfigReq)(nil),              // 15: opensource.tab.cache_server.GetTabConfigReq
	(*GetTabConfigResp)(nil),             // 16: opensource.tab.cache_server.GetTabConfigResp
	(*LayerToGroupID)(nil),               // 17: opensource.tab.cache_server.LayerToGroupID
	(*Domain)(nil),                       // 18: opensource.tab.cache_server.Domain
	(*Layer)(nil),                        // 19: opensource.tab.cache_server.Layer
	(*Experiment)(nil),                   // 20: opensource.tab.cache_server.Experiment
	(*HoldoutDomain)(nil),                // 21: opensource.tab.cache_server.HoldoutDomain
	(*MultiLayerDomain)(nil),             // 22: opensource.tab.cache_server.MultiLayerDomain
	(*Group)(nil),                        // 23: opensource.tab.cache_server.Group
	(*IssueInfo)(nil),                    // 24: opensource.tab.cache_server.IssueInfo
	(*TagList)(nil),                      // 25: opensource.tab.cache_server.tagList
	(*Tag)(nil),                          // 26: opensource.tab.cache_server.tag
	(*DomainMetadata)(nil),               // 27: opensource.tab.cache_server.DomainMetadata
	(*LayerMetadata)(nil),                // 28: opensource.tab.cache_server.LayerMetadata
	(*TrafficRange)(nil),                 // 29: opensource.tab.cache_server.TrafficRange
	(*ExperimentData)(nil),               // 30: opensource.tab.cache_server.ExperimentData
	(*HoldoutData)(nil),                  // 31: opensource.tab.cache_server.HoldoutData
	(*RemoteConfigData)(nil),             // 32: opensource.tab.cache_server.RemoteConfigData
	(*RemoteConfig)(nil),                 // 33: opensource.tab.cache_server.RemoteConfig
	(*Condition)(nil),                    // 34: opensource.tab.cache_server.Condition
	(*ControlData)(nil),                  // 35: opensource.tab.cache_server.ControlData
	(*MetricsConfig)(nil),                // 36: opensource.tab.cache_server.MetricsConfig
	(*MetricsInitConfig)(nil),            // 37: opensource.tab.cache_server.MetricsInitConfig
	(*MetricsMetadata)(nil),              // 38: opensource.tab.cache_server.MetricsMetadata
	(*TabConfig)(nil),                    // 39: opensource.tab.cache_server.TabConfig
	(*TabConfigManager)(nil),             // 40: opensource.tab.cache_server.TabConfigManager
	(*BucketInfo)(nil),                   // 41: opensource.tab.cache_server.BucketInfo
	(*BatchGetExperimentBucketReq)(nil),  // 42: opensource.tab.cache_server.BatchGetExperimentBucketReq
	(*BatchGetExperimentBucketResp)(nil), // 43: opensource.tab.cache_server.BatchGetExperimentBucketResp
	(*BatchGetGroupBucketReq)(nil),       // 44: opensource.tab.cache_server.BatchGetGroupBucketReq
	(*BatchGetGroupBucketResp)(nil),      // 45: opensource.tab.cache_server.BatchGetGroupBucketResp
	nil,                                  // 46: opensource.tab.cache_server.LayerToGroupID.LayerToGroupIdEntry
	nil,                                  // 47: opensource.tab.cache_server.Layer.GroupIndexEntry
	nil,                                  // 48: opensource.tab.cache_server.Layer.ExperimentIndexEntry
	nil,                                  // 49: opensource.tab.cache_server.Experiment.GroupIdIndexEntry
	nil,                                  // 50: opensource.tab.cache_server.Group.ParamsEntry
	nil,                                  // 51: opensource.tab.cache_server.ExperimentData.OverrideListEntry
	nil,                                  // 52: opensource.tab.cache_server.HoldoutData.HoldoutLayerIndexEntry
	nil,                                  // 53: opensource.tab.cache_server.RemoteConfigData.RemoteConfigIndexEntry
	nil,                                  // 54: opensource.tab.cache_server.RemoteConfig.OverrideListEntry
	nil,                                  // 55: opensource.tab.cache_server.ControlData.IgnoreReportGroupIdEntry
	nil,                                  // 56: opensource.tab.cache_server.ControlData.ExperimentMetricsConfigEntry
	nil,                                  // 57: opensource.tab.cache_server.ControlData.RemoteConfigMetricsConfigEntry
	nil,                                  // 58: opensource.tab.cache_server.ControlData.FeatureFlagMetricsConfigEntry
	nil,                                  // 59: opensource.tab.cache_server.ControlData.MetricsInitConfigIndexEntry
	nil,                                  // 60: opensource.tab.cache_server.MetricsInitConfig.KvEntry
	nil,                                  // 61: opensource.tab.cache_server.MetricsMetadata.ExpandedDataEntry
	nil,                                  // 62: opensource.tab.cache_server.BatchGetExperimentBucketReq.BucketVersionIndexEntry
	nil,                                  // 63: opensource.tab.cache_server.BatchGetExperimentBucketResp.BucketIndexEntry
	nil,                                  // 64: opensource.tab.cache_server.BatchGetGroupBucketReq.BucketVersionIndexEntry
	nil,                                  // 65: opensource.tab.cache_server.BatchGetGroupBucketResp.BucketIndexEntry
}
var file_cache_server_proto_depIdxs = []int32{
	1,  // 0: opensource.tab.cache_server.GetTabConfigReq.update_type:type_name -> opensource.tab.cache_server.UpdateType
	2,  // 1: opensource.tab.cache_server.GetTabConfigResp.code:type_name -> opensource.tab.cache_server.Code
	40, // 2: opensource.tab.cache_server.GetTabConfigResp.tab_config_manager:type_name -> opensource.tab.cache_server.TabConfigManager
	46, // 3: opensource.tab.cache_server.LayerToGroupID.layer_to_group_id:type_name -> opensource.tab.cache_server.LayerToGroupID.LayerToGroupIdEntry
	27, // 4: opensource.tab.cache_server.Domain.metadata:type_name -> opensource.tab.cache_server.DomainMetadata
	21, // 5: opensource.tab.cache_server.Domain.holdout_domain_list:type_name -> opensource.tab.cache_server.HoldoutDomain
	22, // 6: opensource.tab.cache_server.Domain.multi_layer_domain_list:type_name -> opensource.tab.cache_server.MultiLayerDomain
	18, // 7: opensource.tab.cache_server.Domain.domain_list:type_name -> opensource.tab.cache_server.Domain
	28, // 8: opensource.tab.cache_server.Layer.metadata:type_name -> opensource.tab.cache_server.LayerMetadata
	47, // 9: opensource.tab.cache_server.Layer.group_index:type_name -> opensource.tab.cache_server.Layer.GroupIndexEntry
	48, // 10: opensource.tab.cache_server.Layer.experiment_index:type_name -> opensource.tab.cache_server.Layer.ExperimentIndexEntry
	3,  // 11: opensource.tab.cache_server.Experiment.hash_method:type_name -> opensource.tab.cache_server.HashMethod
	8,  // 12: opensource.tab.cache_server.Experiment.issue_type:type_name -> opensource.tab.cache_server.IssueType
	49, // 13: opensource.tab.cache_server.Experiment.group_id_index:type_name -> opensource.tab.cache_server.Experiment.GroupIdIndexEntry
	27, // 14: opensource.tab.cache_server.HoldoutDomain.metadata:type_name -> opensource.tab.cache_server.DomainMetadata
	19, // 15: opensource.tab.cache_server.HoldoutDomain.layer_list:type_name -> opensource.tab.cache_server.Layer
	27, // 16: opensource.tab.cache_server.MultiLayerDomain.metadata:type_name -> opensource.tab.cache_server.DomainMetadata
	19, // 17: opensource.tab.cache_server.MultiLayerDomain.layer_list:type_name -> opensource.tab.cache_server.Layer
	50, // 18: opensource.tab.cache_server.Group.params:type_name -> opensource.tab.cache_server.Group.ParamsEntry
	24, // 19: opensource.tab.cache_server.Group.issue_info:type_name -> opensource.tab.cache_server.IssueInfo
	10, // 20: opensource.tab.cache_server.Group.unit_id_type:type_name -> opensource.tab.cache_server.UnitIDType
	8,  // 21: opensource.tab.cache_server.IssueInfo.issue_type:type_name -> opensource.tab.cache_server.IssueType
	25, // 22: opensource.tab.cache_server.IssueInfo.tag_list_group:type_name -> opensource.tab.cache_server.tagList
	26, // 23: opensource.tab.cache_server.tagList.tag_list:type_name -> opensource.tab.cache_server.tag
	7,  // 24: opensource.tab.cache_server.tag.tag_type:type_name -> opensource.tab.cache_server.TagType
	6,  // 25: opensource.tab.cache_server.tag.operator:type_name -> opensource.tab.cache_server.Operator
	10, // 26: opensource.tab.cache_server.tag.unit_id_type:type_name -> opensource.tab.cache_server.UnitIDType
	5,  // 27: opensource.tab.cache_server.tag.tag_origin:type_name -> opensource.tab.cache_server.TagOrigin
	9,  // 28: opensource.tab.cache_server.DomainMetadata.domain_type:type_name -> opensource.tab.cache_server.DomainType
	3,  // 29: opensource.tab.cache_server.DomainMetadata.hash_method:type_name -> opensource.tab.cache_server.HashMethod
	10, // 30: opensource.tab.cache_server.DomainMetadata.unit_id_type:type_name -> opensource.tab.cache_server.UnitIDType
	29, // 31: opensource.tab.cache_server.DomainMetadata.traffic_range_list:type_name -> opensource.tab.cache_server.TrafficRange
	23, // 32: opensource.tab.cache_server.LayerMetadata.default_group:type_name -> opensource.tab.cache_server.Group
	4,  // 33: opensource.tab.cache_server.LayerMetadata.hash_type:type_name -> opensource.tab.cache_server.HashType
	3,  // 34: opensource.tab.cache_server.LayerMetadata.hash_method:type_name -> opensource.tab.cache_server.HashMethod
	10, // 35: opensource.tab.cache_server.LayerMetadata.unit_id_type:type_name -> opensource.tab.cache_server.UnitIDType
	29, // 36: opensource.tab.cache_server.LayerMetadata.traffic_range_list:type_name -> opensource.tab.cache_server.TrafficRange
	11, // 37: opensource.tab.cache_server.LayerMetadata.layer_type:type_name -> opensource.tab.cache_server.LayerType
	51, // 38: opensource.tab.cache_server.ExperimentData.override_list:type_name -> opensource.tab.cache_server.ExperimentData.OverrideListEntry
	18, // 39: opensource.tab.cache_server.ExperimentData.global_domain:type_name -> opensource.tab.cache_server.Domain
	31, // 40: opensource.tab.cache_server.ExperimentData.holdout_data:type_name -> opensource.tab.cache_server.HoldoutData
	52, // 41: opensource.tab.cache_server.HoldoutData.holdout_layer_index:type_name -> opensource.tab.cache_server.HoldoutData.HoldoutLayerIndexEntry
	53, // 42: opensource.tab.cache_server.RemoteConfigData.remote_config_index:type_name -> opensource.tab.cache_server.RemoteConfigData.RemoteConfigIndexEntry
	12, // 43: opensource.tab.cache_server.RemoteConfig.type:type_name -> opensource.tab.cache_server.RemoteConfigValueType
	34, // 44: opensource.tab.cache_server.RemoteConfig.condition_list:type_name -> opensource.tab.cache_server.Condition
	54, // 45: opensource.tab.cache_server.RemoteConfig.override_list:type_name -> opensource.tab.cache_server.RemoteConfig.OverrideListEntry
	3,  // 46: opensource.tab.cache_server.Condition.hash_method:type_name -> opensource.tab.cache_server.HashMethod
	41, // 47: opensource.tab.cache_server.Condition.bucket_info:type_name -> opensource.tab.cache_server.BucketInfo
	10, // 48: opensource.tab.cache_server.Condition.unit_id_type:type_name -> opensource.tab.cache_server.UnitIDType
	24, // 49: opensource.tab.cache_server.Condition.issue_info:type_name -> opensource.tab.cache_server.IssueInfo
	55, // 50: opensource.tab.cache_server.ControlData.ignore_report_group_id:type_name -> opensource.tab.cache_server.ControlData.IgnoreReportGroupIdEntry
	56, // 51: opensource.tab.cache_server.ControlData.experiment_metrics_config:type_name -> opensource.tab.cache_server.ControlData.ExperimentMetricsConfigEntry
	36, // 52: opensource.tab.cache_server.ControlData.default_experiment_metrics_config:type_name -> opensource.tab.cache_server.MetricsConfig
	57, // 53: opensource.tab.cache_server.ControlData.remote_config_metrics_config:type_name -> opensource.tab.cache_server.ControlData.RemoteConfigMetricsConfigEntry
	36, // 54: opensource.tab.cache_server.ControlData.default_remote_config_metrics_config:type_name -> opensource.tab.cache_server.MetricsConfig
	58, // 55: opensource.tab.cache_server.ControlData.feature_flag_metrics_config:type_name -> opensource.tab.cache_server.ControlData.FeatureFlagMetricsConfigEntry
	36, // 56: opensource.tab.cache_server.ControlData.default_feature_flag_metrics_config:type_name -> opensource.tab.cache_server.MetricsConfig
	36, // 57: opensource.tab.cache_server.ControlData.event_metrics_config:type_name -> opensource.tab.cache_server.MetricsConfig
	59, // 58: opensource.tab.cache_server.ControlData.metrics_init_config_index:type_name -> opensource.tab.cache_server.ControlData.MetricsInitConfigIndexEntry
	38, // 59: opensource.tab.cache_server.MetricsConfig.metadata:type_name -> opensource.tab.cache_server.MetricsMetadata
	60, // 60: opensource.tab.cache_server.MetricsInitConfig.kv:type_name -> opensource.tab.cache_server.MetricsInitConfig.KvEntry
	61, // 61: opensource.tab.cache_server.MetricsMetadata.expanded_data:type_name -> opensource.tab.cache_server.MetricsMetadata.ExpandedDataEntry
	30, // 62: opensource.tab.cache_server.TabConfig.experiment_data:type_name -> opensource.tab.cache_server.ExperimentData
	32, // 63: opensource.tab.cache_server.TabConfig.config_data:type_name -> opensource.tab.cache_server.RemoteConfigData
	35, // 64: opensource.tab.cache_server.TabConfig.control_data:type_name -> opensource.tab.cache_server.ControlData
	1,  // 65: opensource.tab.cache_server.TabConfigManager.update_type:type_name -> opensource.tab.cache_server.UpdateType
	39, // 66: opensource.tab.cache_server.TabConfigManager.tab_config:type_name -> opensource.tab.cache_server.TabConfig
	13, // 67: opensource.tab.cache_server.BucketInfo.bucket_type:type_name -> opensource.tab.cache_server.BucketType
	29, // 68: opensource.tab.cache_server.BucketInfo.traffic_range:type_name -> opensource.tab.cache_server.TrafficRange
	14, // 69: opensource.tab.cache_server.BucketInfo.modify_type:type_name -> opensource.tab.cache_server.ModifyType
	62, // 70: opensource.tab.cache_server.BatchGetExperimentBucketReq.bucket_version_index:type_name -> opensource.tab.cache_server.BatchGetExperimentBucketReq.BucketVersionIndexEntry
	2,  // 71: opensource.tab.cache_server.BatchGetExperimentBucketResp.code:type_name -> opensource.tab.cache_server.Code
	63, // 72: opensource.tab.cache_server.BatchGetExperimentBucketResp.bucketIndex:type_name -> opensource.tab.cache_server.BatchGetExperimentBucketResp.BucketIndexEntry
	64, // 73: opensource.tab.cache_server.BatchGetGroupBucketReq.bucket_version_index:type_name -> opensource.tab.cache_server.BatchGetGroupBucketReq.BucketVersionIndexEntry
	2,  // 74: opensource.tab.cache_server.BatchGetGroupBucketResp.code:type_name -> opensource.tab.cache_server.Code
	65, // 75: opensource.tab.cache_server.BatchGetGroupBucketResp.bucketIndex:type_name -> opensource.tab.cache_server.BatchGetGroupBucketResp.BucketIndexEntry
	23, // 76: opensource.tab.cache_server.Layer.GroupIndexEntry.value:type_name -> opensource.tab.cache_server.Group
	20, // 77: opensource.tab.cache_server.Layer.ExperimentIndexEntry.value:type_name -> opensource.tab.cache_server.Experiment
	17, // 78: opensource.tab.cache_server.ExperimentData.OverrideListEntry.value:type_name -> opensource.tab.cache_server.LayerToGroupID
	19, // 79: opensource.tab.cache_server.HoldoutData.HoldoutLayerIndexEntry.value:type_name -> opensource.tab.cache_server.Layer
	33, // 80: opensource.tab.cache_server.RemoteConfigData.RemoteConfigIndexEntry.value:type_name -> opensource.tab.cache_server.RemoteConfig
	36, // 81: opensource.tab.cache_server.ControlData.ExperimentMetricsConfigEntry.value:type_name -> opensource.tab.cache_server.MetricsConfig
	36, // 82: opensource.tab.cache_server.ControlData.RemoteConfigMetricsConfigEntry.value:type_name -> opensource.tab.cache_server.MetricsConfig
	36, // 83: opensource.tab.cache_server.ControlData.FeatureFlagMetricsConfigEntry.value:type_name -> opensource.tab.cache_server.MetricsConfig
	37, // 84: opensource.tab.cache_server.ControlData.MetricsInitConfigIndexEntry.value:type_name -> opensource.tab.cache_server.MetricsInitConfig
	41, // 85: opensource.tab.cache_server.BatchGetExperimentBucketResp.BucketIndexEntry.value:type_name -> opensource.tab.cache_server.BucketInfo
	41, // 86: opensource.tab.cache_server.BatchGetGroupBucketResp.BucketIndexEntry.value:type_name -> opensource.tab.cache_server.BucketInfo
	15, // 87: opensource.tab.cache_server.APIServer.GetTabConfig:input_type -> opensource.tab.cache_server.GetTabConfigReq
	42, // 88: opensource.tab.cache_server.APIServer.BatchGetExperimentBucket:input_type -> opensource.tab.cache_server.BatchGetExperimentBucketReq
	44, // 89: opensource.tab.cache_server.APIServer.BatchGetGroupBucket:input_type -> opensource.tab.cache_server.BatchGetGroupBucketReq
	16, // 90: opensource.tab.cache_server.APIServer.GetTabConfig:output_type -> opensource.tab.cache_server.GetTabConfigResp
	43, // 91: opensource.tab.cache_server.APIServer.BatchGetExperimentBucket:output_type -> opensource.tab.cache_server.BatchGetExperimentBucketResp
	45, // 92: opensource.tab.cache_server.APIServer.BatchGetGroupBucket:output_type -> opensource.tab.cache_server.BatchGetGroupBucketResp
	90, // [90:93] is the sub-list for method output_type
	87, // [87:90] is the sub-list for method input_type
	87, // [87:87] is the sub-list for extension type_name
	87, // [87:87] is the sub-list for extension extendee
	0,  // [0:87] is the sub-list for field type_name
}

func init() { file_cache_server_proto_init() }
func file_cache_server_proto_init() {
	if File_cache_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cache_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTabConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTabConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayerToGroupID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Domain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Experiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldoutDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiLayerDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayerMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldoutData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsInitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabConfigManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetExperimentBucketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetExperimentBucketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetGroupBucketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetGroupBucketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cache_server_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cache_server_proto_goTypes,
		DependencyIndexes: file_cache_server_proto_depIdxs,
		EnumInfos:         file_cache_server_proto_enumTypes,
		MessageInfos:      file_cache_server_proto_msgTypes,
	}.Build()
	File_cache_server_proto = out.File
	file_cache_server_proto_rawDesc = nil
	file_cache_server_proto_goTypes = nil
	file_cache_server_proto_depIdxs = nil
}
